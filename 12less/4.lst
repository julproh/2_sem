     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020) 
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax 
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1>     
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:       
   155                              <1>       mov eax,edi 
   156                              <1>       xor edx,edx 
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:      
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1>        
   173                              <1>   
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2: 
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx 
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR 
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx 
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx 
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi 
   308                              <1> %%m_p: 
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
   325                              <1> 
   326                              <1> 
   327                              <1> 
   328                              <1> 
     2                                  global _start
     3                                  section .data
     4 00000000 0B0000000C000000F3-     s1 dd 11, 12, -13, 14, 15, -16, 17, -18, 19, 20
     4 00000009 FFFFFF0E0000000F00-
     4 00000012 0000F0FFFFFF110000-
     4 0000001B 00EEFFFFFF13000000-
     4 00000024 14000000           
     5 00000028 1E0000001F00000020-     s2 dd 30, 31, 32, 33, 34, 35, 36, 37, 38, 39
     5 00000031 000000210000002200-
     5 0000003A 000023000000240000-
     5 00000043 002500000026000000-
     5 0000004C 27000000           
     6                                  section .text
     7                                  _start:
     8                                  
     9 00000000 B904000000              mov ecx, 4
    10 00000005 BE[08000000]            mov esi, s1+8
    11 0000000A BF[2C000000]            mov edi, s2+4
    12 0000000F F3A5                    rep  movsd
    13                                  
    14 00000011 B90A000000              mov ecx, 10
    15 00000016 BB00000000              mov ebx, 0
    16                                  l:
    17 0000001B 8B049D[28000000]        mov eax, dword[s2+ebx*4]
    18                                  SIGNINT eax
    18 00000022 60                  <1> pusha
    18 00000023 9C                  <1> pushf
    18 00000024 50                  <1> push dword %1
    18 00000025 58                  <1> pop eax
    18 00000026 83F800              <1>  cmp eax,0
    18 00000029 7D25                <1>  jge %%m5
    18                              <1>  PUTCHAR '-'
    18 0000002B 60                  <2>  pusha
    18 0000002C 9C                  <2>  pushf
    18                              <2> %ifstr %1
    18 0000002D B02D                <2>  mov al, %1
    18                              <2> %elifnum %1
    18                              <2>  mov al, %1
    18                              <2> %elifidni %1,al
    18                              <2>  nop
    18                              <2> %elifidni %1,ah
    18                              <2>  mov al, ah
    18                              <2> %elifidni %1,bl
    18                              <2>  mov al, bl
    18                              <2> %elifidni %1,bh
    18                              <2>  mov al, bh
    18                              <2> %elifidni %1,cl
    18                              <2>  mov al, cl
    18                              <2> %elifidni %1,ch
    18                              <2>  mov al, ch
    18                              <2> %elifidni %1,dl
    18                              <2>  mov al, dl
    18                              <2> %elifidni %1,dh
    18                              <2>  mov al, dh
    18                              <2> %else
    18                              <2>  mov al, %1
    18                              <2> %endif
    18 0000002F 83EC02              <2>  sub esp, 2
    18 00000032 89E7                <2>  mov edi, esp
    18 00000034 8807                <2>  mov [edi], al
    18                              <2>  _syscall_write 1, edi, 1
    18                              <3>  _syscall_3 4,%1,%2,%3
    18 00000036 52                  <4>  push edx
    18 00000037 51                  <4>  push ecx
    18 00000038 53                  <4>  push ebx
    18 00000039 6A04                <4>  push %1
    18 0000003B 6A01                <4>  push %2
    18 0000003D 57                  <4>  push %3
    18 0000003E 6A01                <4>  push %4
    18 00000040 5A                  <4>  pop edx
    18 00000041 59                  <4>  pop ecx
    18 00000042 5B                  <4>  pop ebx
    18 00000043 58                  <4>  pop eax
    18 00000044 CD80                <4>  int 0x80
    18 00000046 5B                  <4>  pop ebx
    18 00000047 59                  <4>  pop ecx
    18 00000048 5A                  <4>  pop edx
    18 00000049 83C402              <2>  add esp, 2
    18 0000004C 9D                  <2>  popf
    18 0000004D 61                  <2>  popa
    18 0000004E F7D8                <1>  neg eax
    18                              <1> %%m5:
    18                              <1>  UNSINT eax
    18 00000050 60                  <2> pusha
    18 00000051 9C                  <2> pushf
    18 00000052 50                  <2> push dword %1
    18 00000053 58                  <2> pop eax
    18 00000054 89C7                <2> mov edi,eax
    18 00000056 BE0A000000          <2> mov esi,10
    18 0000005B 31DB                <2>  xor ebx,ebx
    18                              <2> %%m1:
    18 0000005D 31D2                <2>  xor edx,edx
    18 0000005F F7F6                <2>  div esi
    18 00000061 43                  <2>  inc ebx
    18 00000062 83F800              <2>  cmp eax,0
    18 00000065 75F6                <2>  jne %%m1
    18                              <2> 
    18 00000067 B801000000          <2>  mov eax,1
    18 0000006C 89D9                <2>  mov ecx,ebx
    18 0000006E 49                  <2>  dec ecx
    18                              <2> 
    18 0000006F 83F900              <2>  cmp ecx,0
    18 00000072 7441                <2>  je %%m4
    18 00000074 F7E6                <2> %%m2: mul esi
    18 00000076 E2FC                <2>  loop %%m2
    18                              <2> 
    18 00000078 89C3                <2>  mov ebx,eax
    18                              <2> 
    18                              <2> %%m3:
    18 0000007A 89F8                <2>  mov eax,edi
    18 0000007C 31D2                <2>  xor edx,edx
    18 0000007E F7F3                <2>  div ebx
    18 00000080 0430                <2>  add al,'0'
    18                              <2>  PUTCHAR al
    18 00000082 60                  <3>  pusha
    18 00000083 9C                  <3>  pushf
    18                              <3> %ifstr %1
    18                              <3>  mov al, %1
    18                              <3> %elifnum %1
    18                              <3>  mov al, %1
    18                              <3> %elifidni %1,al
    18 00000084 90                  <3>  nop
    18                              <3> %elifidni %1,ah
    18                              <3>  mov al, ah
    18                              <3> %elifidni %1,bl
    18                              <3>  mov al, bl
    18                              <3> %elifidni %1,bh
    18                              <3>  mov al, bh
    18                              <3> %elifidni %1,cl
    18                              <3>  mov al, cl
    18                              <3> %elifidni %1,ch
    18                              <3>  mov al, ch
    18                              <3> %elifidni %1,dl
    18                              <3>  mov al, dl
    18                              <3> %elifidni %1,dh
    18                              <3>  mov al, dh
    18                              <3> %else
    18                              <3>  mov al, %1
    18                              <3> %endif
    18 00000085 83EC02              <3>  sub esp, 2
    18 00000088 89E7                <3>  mov edi, esp
    18 0000008A 8807                <3>  mov [edi], al
    18                              <3>  _syscall_write 1, edi, 1
    18                              <4>  _syscall_3 4,%1,%2,%3
    18 0000008C 52                  <5>  push edx
    18 0000008D 51                  <5>  push ecx
    18 0000008E 53                  <5>  push ebx
    18 0000008F 6A04                <5>  push %1
    18 00000091 6A01                <5>  push %2
    18 00000093 57                  <5>  push %3
    18 00000094 6A01                <5>  push %4
    18 00000096 5A                  <5>  pop edx
    18 00000097 59                  <5>  pop ecx
    18 00000098 5B                  <5>  pop ebx
    18 00000099 58                  <5>  pop eax
    18 0000009A CD80                <5>  int 0x80
    18 0000009C 5B                  <5>  pop ebx
    18 0000009D 59                  <5>  pop ecx
    18 0000009E 5A                  <5>  pop edx
    18 0000009F 83C402              <3>  add esp, 2
    18 000000A2 9D                  <3>  popf
    18 000000A3 61                  <3>  popa
    18 000000A4 89D7                <2>  mov edi,edx
    18 000000A6 31D2                <2>  xor edx,edx
    18 000000A8 89D8                <2>  mov eax,ebx
    18 000000AA F7F6                <2>  div esi
    18 000000AC 83F801              <2>  cmp eax,1
    18 000000AF 7404                <2>  je %%m4
    18 000000B1 89C3                <2>  mov ebx,eax
    18 000000B3 EBC5                <2>  jmp %%m3
    18                              <2>  %%m4:
    18 000000B5 89FA                <2>  mov edx,edi
    18 000000B7 80C230              <2>  add dl,'0'
    18                              <2>  PUTCHAR dl
    18 000000BA 60                  <3>  pusha
    18 000000BB 9C                  <3>  pushf
    18                              <3> %ifstr %1
    18                              <3>  mov al, %1
    18                              <3> %elifnum %1
    18                              <3>  mov al, %1
    18                              <3> %elifidni %1,al
    18                              <3>  nop
    18                              <3> %elifidni %1,ah
    18                              <3>  mov al, ah
    18                              <3> %elifidni %1,bl
    18                              <3>  mov al, bl
    18                              <3> %elifidni %1,bh
    18                              <3>  mov al, bh
    18                              <3> %elifidni %1,cl
    18                              <3>  mov al, cl
    18                              <3> %elifidni %1,ch
    18                              <3>  mov al, ch
    18                              <3> %elifidni %1,dl
    18 000000BC 88D0                <3>  mov al, dl
    18                              <3> %elifidni %1,dh
    18                              <3>  mov al, dh
    18                              <3> %else
    18                              <3>  mov al, %1
    18                              <3> %endif
    18 000000BE 83EC02              <3>  sub esp, 2
    18 000000C1 89E7                <3>  mov edi, esp
    18 000000C3 8807                <3>  mov [edi], al
    18                              <3>  _syscall_write 1, edi, 1
    18                              <4>  _syscall_3 4,%1,%2,%3
    18 000000C5 52                  <5>  push edx
    18 000000C6 51                  <5>  push ecx
    18 000000C7 53                  <5>  push ebx
    18 000000C8 6A04                <5>  push %1
    18 000000CA 6A01                <5>  push %2
    18 000000CC 57                  <5>  push %3
    18 000000CD 6A01                <5>  push %4
    18 000000CF 5A                  <5>  pop edx
    18 000000D0 59                  <5>  pop ecx
    18 000000D1 5B                  <5>  pop ebx
    18 000000D2 58                  <5>  pop eax
    18 000000D3 CD80                <5>  int 0x80
    18 000000D5 5B                  <5>  pop ebx
    18 000000D6 59                  <5>  pop ecx
    18 000000D7 5A                  <5>  pop edx
    18 000000D8 83C402              <3>  add esp, 2
    18 000000DB 9D                  <3>  popf
    18 000000DC 61                  <3>  popa
    18                              <2> 
    18                              <2> 
    18 000000DD 9D                  <2> popf
    18 000000DE 61                  <2> popa
    18 000000DF 9D                  <1> popf
    18 000000E0 61                  <1> popa
    19                                  PRINT ","
    19 000000E1 60                  <1>  pusha
    19 000000E2 9C                  <1>  pushf
    19 000000E3 EB02                <1>  jmp %%astr
    19 000000E5 2C00                <1> %%str db %1, 0
    19                              <1> %%strln equ $-%%str
    19                              <1> %%astr: _syscall_write 1, %%str, %%strln
    19                              <2> ..@14.astr: 
    19                              <2>  _syscall_3 4,%1,%2,%3
    19 000000E7 52                  <3>  push edx
    19 000000E8 51                  <3>  push ecx
    19 000000E9 53                  <3>  push ebx
    19 000000EA 6A04                <3>  push %1
    19 000000EC 6A01                <3>  push %2
    19 000000EE 68[E5000000]        <3>  push %3
    19 000000F3 6A02                <3>  push %4
    19 000000F5 5A                  <3>  pop edx
    19 000000F6 59                  <3>  pop ecx
    19 000000F7 5B                  <3>  pop ebx
    19 000000F8 58                  <3>  pop eax
    19 000000F9 CD80                <3>  int 0x80
    19 000000FB 5B                  <3>  pop ebx
    19 000000FC 59                  <3>  pop ecx
    19 000000FD 5A                  <3>  pop edx
    19 000000FE 9D                  <1>  popf
    19 000000FF 61                  <1>  popa
    20 00000100 43                      inc ebx
    21 00000101 49                      dec ecx
    22 00000102 83F900                  cmp ecx, 0
    23 00000105 7405                    je t
    24 00000107 E90FFFFFFF              jmp l
    25                                  
    26                                  t:
    27                                  
    28                                  PUTCHAR 0xA
    28 0000010C 60                  <1>  pusha
    28 0000010D 9C                  <1>  pushf
    28                              <1> %ifstr %1
    28                              <1>  mov al, %1
    28                              <1> %elifnum %1
    28 0000010E B00A                <1>  mov al, %1
    28                              <1> %elifidni %1,al
    28                              <1>  nop
    28                              <1> %elifidni %1,ah
    28                              <1>  mov al, ah
    28                              <1> %elifidni %1,bl
    28                              <1>  mov al, bl
    28                              <1> %elifidni %1,bh
    28                              <1>  mov al, bh
    28                              <1> %elifidni %1,cl
    28                              <1>  mov al, cl
    28                              <1> %elifidni %1,ch
    28                              <1>  mov al, ch
    28                              <1> %elifidni %1,dl
    28                              <1>  mov al, dl
    28                              <1> %elifidni %1,dh
    28                              <1>  mov al, dh
    28                              <1> %else
    28                              <1>  mov al, %1
    28                              <1> %endif
    28 00000110 83EC02              <1>  sub esp, 2
    28 00000113 89E7                <1>  mov edi, esp
    28 00000115 8807                <1>  mov [edi], al
    28                              <1>  _syscall_write 1, edi, 1
    28                              <2>  _syscall_3 4,%1,%2,%3
    28 00000117 52                  <3>  push edx
    28 00000118 51                  <3>  push ecx
    28 00000119 53                  <3>  push ebx
    28 0000011A 6A04                <3>  push %1
    28 0000011C 6A01                <3>  push %2
    28 0000011E 57                  <3>  push %3
    28 0000011F 6A01                <3>  push %4
    28 00000121 5A                  <3>  pop edx
    28 00000122 59                  <3>  pop ecx
    28 00000123 5B                  <3>  pop ebx
    28 00000124 58                  <3>  pop eax
    28 00000125 CD80                <3>  int 0x80
    28 00000127 5B                  <3>  pop ebx
    28 00000128 59                  <3>  pop ecx
    28 00000129 5A                  <3>  pop edx
    28 0000012A 83C402              <1>  add esp, 2
    28 0000012D 9D                  <1>  popf
    28 0000012E 61                  <1>  popa
    29                                  FINISH
    29                              <1>  _syscall_exit %1
    29 0000012F BB00000000          <2>  mov ebx, %1
    29 00000134 B801000000          <2>  mov eax, 1
    29 00000139 CD80                <2>  int 0x80
