     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020)
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   127                              <1> %macro UNSINT 1
   128                              <1> pusha
   129                              <1> pushf
   130                              <1> push dword %1
   131                              <1> pop eax
   132                              <1> mov edi,eax
   133                              <1> mov esi,10
   134                              <1>   xor ebx,ebx
   135                              <1> %%m1:
   136                              <1>    xor edx,edx
   137                              <1>    div esi
   138                              <1>    inc ebx
   139                              <1>    cmp eax,0
   140                              <1>    jne %%m1
   141                              <1>     
   142                              <1>    mov eax,1
   143                              <1>    mov ecx,ebx
   144                              <1>    dec ecx
   145                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   146                              <1>     cmp ecx,0
   147                              <1>      je %%m4
   148                              <1> %%m2:  mul esi
   149                              <1>        loop %%m2
   150                              <1> 
   151                              <1>        mov ebx,eax
   152                              <1> 
   153                              <1> %%m3:       
   154                              <1>       mov eax,edi 
   155                              <1>       xor edx,edx 
   156                              <1>       div ebx
   157                              <1>       add al,'0'
   158                              <1>       PUTCHAR al
   159                              <1>       mov edi,edx
   160                              <1>       xor edx,edx
   161                              <1>       mov eax,ebx
   162                              <1>       div esi
   163                              <1>       cmp eax,1
   164                              <1>       je %%m4
   165                              <1>       mov ebx,eax
   166                              <1>       jmp %%m3
   167                              <1>  %%m4:      
   168                              <1>       mov edx,edi
   169                              <1>       add dl,'0'
   170                              <1>       PUTCHAR dl
   171                              <1>        
   172                              <1>   
   173                              <1> popf
   174                              <1> popa
   175                              <1> %endmacro
   176                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   177                              <1> %macro SIGNINT 1
   178                              <1> pusha
   179                              <1> pushf
   180                              <1> push dword %1
   181                              <1> pop eax
   182                              <1>     cmp eax,0
   183                              <1>     jge %%m5
   184                              <1>     PUTCHAR '-'
   185                              <1>     neg eax
   186                              <1> %%m5:
   187                              <1>       UNSINT eax
   188                              <1> popf
   189                              <1> popa
   190                              <1> %endmacro
     2                                  global _start
     3                                  section .data
     4 00000000 03                      n db 3
     5                                  section .text
     6                                  
     7                                  fct:
     8 00000000 66BB0100                mov bx,1
     9 00000004 66B80100                mov ax,1 
    10                                  l:
    11 00000008 66F7E3                  mul bx
    12 0000000B 6643                    inc bx
    13 0000000D E2F9                    loop l
    14                                  UNSINT eax
    14 0000000F 60                  <1> pusha
    14 00000010 9C                  <1> pushf
    14 00000011 50                  <1> push dword %1
    14 00000012 58                  <1> pop eax
    14 00000013 89C7                <1> mov edi,eax
    14 00000015 BE0A000000          <1> mov esi,10
    14 0000001A 31DB                <1>  xor ebx,ebx
    14                              <1> %%m1:
    14 0000001C 31D2                <1>  xor edx,edx
    14 0000001E F7F6                <1>  div esi
    14 00000020 43                  <1>  inc ebx
    14 00000021 83F800              <1>  cmp eax,0
    14 00000024 75F6                <1>  jne %%m1
    14                              <1> 
    14 00000026 B801000000          <1>  mov eax,1
    14 0000002B 89D9                <1>  mov ecx,ebx
    14 0000002D 49                  <1>  dec ecx
    14                              <1> 
    14 0000002E 83F900              <1>  cmp ecx,0
    14 00000031 7441                <1>  je %%m4
    14 00000033 F7E6                <1> %%m2: mul esi
    14 00000035 E2FC                <1>  loop %%m2
    14                              <1> 
    14 00000037 89C3                <1>  mov ebx,eax
    14                              <1> 
    14                              <1> %%m3:
    14 00000039 89F8                <1>  mov eax,edi
    14 0000003B 31D2                <1>  xor edx,edx
    14 0000003D F7F3                <1>  div ebx
    14 0000003F 0430                <1>  add al,'0'
    14                              <1>  PUTCHAR al
    14 00000041 60                  <2>  pusha
    14 00000042 9C                  <2>  pushf
    14                              <2> %ifstr %1
    14                              <2>  mov al, %1
    14                              <2> %elifnum %1
    14                              <2>  mov al, %1
    14                              <2> %elifidni %1,al
    14 00000043 90                  <2>  nop
    14                              <2> %elifidni %1,ah
    14                              <2>  mov al, ah
    14                              <2> %elifidni %1,bl
    14                              <2>  mov al, bl
    14                              <2> %elifidni %1,bh
    14                              <2>  mov al, bh
    14                              <2> %elifidni %1,cl
    14                              <2>  mov al, cl
    14                              <2> %elifidni %1,ch
    14                              <2>  mov al, ch
    14                              <2> %elifidni %1,dl
    14                              <2>  mov al, dl
    14                              <2> %elifidni %1,dh
    14                              <2>  mov al, dh
    14                              <2> %else
    14                              <2>  mov al, %1
    14                              <2> %endif
    14 00000044 83EC02              <2>  sub esp, 2
    14 00000047 89E7                <2>  mov edi, esp
    14 00000049 8807                <2>  mov [edi], al
    14                              <2>  _syscall_write 1, edi, 1
    14                              <3>  _syscall_3 4,%1,%2,%3
    14 0000004B 52                  <4>  push edx
    14 0000004C 51                  <4>  push ecx
    14 0000004D 53                  <4>  push ebx
    14 0000004E 6A04                <4>  push %1
    14 00000050 6A01                <4>  push %2
    14 00000052 57                  <4>  push %3
    14 00000053 6A01                <4>  push %4
    14 00000055 5A                  <4>  pop edx
    14 00000056 59                  <4>  pop ecx
    14 00000057 5B                  <4>  pop ebx
    14 00000058 58                  <4>  pop eax
    14 00000059 CD80                <4>  int 0x80
    14 0000005B 5B                  <4>  pop ebx
    14 0000005C 59                  <4>  pop ecx
    14 0000005D 5A                  <4>  pop edx
    14 0000005E 83C402              <2>  add esp, 2
    14 00000061 9D                  <2>  popf
    14 00000062 61                  <2>  popa
    14 00000063 89D7                <1>  mov edi,edx
    14 00000065 31D2                <1>  xor edx,edx
    14 00000067 89D8                <1>  mov eax,ebx
    14 00000069 F7F6                <1>  div esi
    14 0000006B 83F801              <1>  cmp eax,1
    14 0000006E 7404                <1>  je %%m4
    14 00000070 89C3                <1>  mov ebx,eax
    14 00000072 EBC5                <1>  jmp %%m3
    14                              <1>  %%m4:
    14 00000074 89FA                <1>  mov edx,edi
    14 00000076 80C230              <1>  add dl,'0'
    14                              <1>  PUTCHAR dl
    14 00000079 60                  <2>  pusha
    14 0000007A 9C                  <2>  pushf
    14                              <2> %ifstr %1
    14                              <2>  mov al, %1
    14                              <2> %elifnum %1
    14                              <2>  mov al, %1
    14                              <2> %elifidni %1,al
    14                              <2>  nop
    14                              <2> %elifidni %1,ah
    14                              <2>  mov al, ah
    14                              <2> %elifidni %1,bl
    14                              <2>  mov al, bl
    14                              <2> %elifidni %1,bh
    14                              <2>  mov al, bh
    14                              <2> %elifidni %1,cl
    14                              <2>  mov al, cl
    14                              <2> %elifidni %1,ch
    14                              <2>  mov al, ch
    14                              <2> %elifidni %1,dl
    14 0000007B 88D0                <2>  mov al, dl
    14                              <2> %elifidni %1,dh
    14                              <2>  mov al, dh
    14                              <2> %else
    14                              <2>  mov al, %1
    14                              <2> %endif
    14 0000007D 83EC02              <2>  sub esp, 2
    14 00000080 89E7                <2>  mov edi, esp
    14 00000082 8807                <2>  mov [edi], al
    14                              <2>  _syscall_write 1, edi, 1
    14                              <3>  _syscall_3 4,%1,%2,%3
    14 00000084 52                  <4>  push edx
    14 00000085 51                  <4>  push ecx
    14 00000086 53                  <4>  push ebx
    14 00000087 6A04                <4>  push %1
    14 00000089 6A01                <4>  push %2
    14 0000008B 57                  <4>  push %3
    14 0000008C 6A01                <4>  push %4
    14 0000008E 5A                  <4>  pop edx
    14 0000008F 59                  <4>  pop ecx
    14 00000090 5B                  <4>  pop ebx
    14 00000091 58                  <4>  pop eax
    14 00000092 CD80                <4>  int 0x80
    14 00000094 5B                  <4>  pop ebx
    14 00000095 59                  <4>  pop ecx
    14 00000096 5A                  <4>  pop edx
    14 00000097 83C402              <2>  add esp, 2
    14 0000009A 9D                  <2>  popf
    14 0000009B 61                  <2>  popa
    14                              <1> 
    14                              <1> 
    14 0000009C 9D                  <1> popf
    14 0000009D 61                  <1> popa
    15 0000009E C3                      ret
    16                                  
    17                                  _start:
    18 0000009F 8A0D[00000000]          mov cl, [n]
    19 000000A5 E856FFFFFF              call fct
    20                                  PUTCHAR 0xA
    20 000000AA 60                  <1>  pusha
    20 000000AB 9C                  <1>  pushf
    20                              <1> %ifstr %1
    20                              <1>  mov al, %1
    20                              <1> %elifnum %1
    20 000000AC B00A                <1>  mov al, %1
    20                              <1> %elifidni %1,al
    20                              <1>  nop
    20                              <1> %elifidni %1,ah
    20                              <1>  mov al, ah
    20                              <1> %elifidni %1,bl
    20                              <1>  mov al, bl
    20                              <1> %elifidni %1,bh
    20                              <1>  mov al, bh
    20                              <1> %elifidni %1,cl
    20                              <1>  mov al, cl
    20                              <1> %elifidni %1,ch
    20                              <1>  mov al, ch
    20                              <1> %elifidni %1,dl
    20                              <1>  mov al, dl
    20                              <1> %elifidni %1,dh
    20                              <1>  mov al, dh
    20                              <1> %else
    20                              <1>  mov al, %1
    20                              <1> %endif
    20 000000AE 83EC02              <1>  sub esp, 2
    20 000000B1 89E7                <1>  mov edi, esp
    20 000000B3 8807                <1>  mov [edi], al
    20                              <1>  _syscall_write 1, edi, 1
    20                              <2>  _syscall_3 4,%1,%2,%3
    20 000000B5 52                  <3>  push edx
    20 000000B6 51                  <3>  push ecx
    20 000000B7 53                  <3>  push ebx
    20 000000B8 6A04                <3>  push %1
    20 000000BA 6A01                <3>  push %2
    20 000000BC 57                  <3>  push %3
    20 000000BD 6A01                <3>  push %4
    20 000000BF 5A                  <3>  pop edx
    20 000000C0 59                  <3>  pop ecx
    20 000000C1 5B                  <3>  pop ebx
    20 000000C2 58                  <3>  pop eax
    20 000000C3 CD80                <3>  int 0x80
    20 000000C5 5B                  <3>  pop ebx
    20 000000C6 59                  <3>  pop ecx
    20 000000C7 5A                  <3>  pop edx
    20 000000C8 83C402              <1>  add esp, 2
    20 000000CB 9D                  <1>  popf
    20 000000CC 61                  <1>  popa
    21                                  FINISH
    21                              <1>  _syscall_exit %1
    21 000000CD BB00000000          <2>  mov ebx, %1
    21 000000D2 B801000000          <2>  mov eax, 1
    21 000000D7 CD80                <2>  int 0x80
