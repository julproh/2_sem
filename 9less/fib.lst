     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020)
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax 
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
   126                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   127                              <1> %macro UNSINT 1
   128                              <1> pusha
   129                              <1> pushf
   130                              <1> push dword %1
   131                              <1> pop eax
   132                              <1> mov edi,eax
   133                              <1> mov esi,10
   134                              <1>   xor ebx,ebx
   135                              <1> %%m1:
   136                              <1>    xor edx,edx
   137                              <1>    div esi
   138                              <1>    inc ebx
   139                              <1>    cmp eax,0
   140                              <1>    jne %%m1
   141                              <1>     
   142                              <1>    mov eax,1
   143                              <1>    mov ecx,ebx
   144                              <1>    dec ecx
   145                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   146                              <1>     cmp ecx,0
   147                              <1>      je %%m4
   148                              <1> %%m2:  mul esi
   149                              <1>        loop %%m2
   150                              <1> 
   151                              <1>        mov ebx,eax
   152                              <1> 
   153                              <1> %%m3:       
   154                              <1>       mov eax,edi 
   155                              <1>       xor edx,edx 
   156                              <1>       div ebx
   157                              <1>       add al,'0'
   158                              <1>       PUTCHAR al
   159                              <1>       mov edi,edx
   160                              <1>       xor edx,edx
   161                              <1>       mov eax,ebx
   162                              <1>       div esi
   163                              <1>       cmp eax,1
   164                              <1>       je %%m4
   165                              <1>       mov ebx,eax
   166                              <1>       jmp %%m3
   167                              <1>  %%m4:      
   168                              <1>       mov edx,edi
   169                              <1>       add dl,'0'
   170                              <1>       PUTCHAR dl
   171                              <1>        
   172                              <1>   
   173                              <1> popf
   174                              <1> popa
   175                              <1> %endmacro
   176                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   177                              <1> %macro SIGNINT 1
   178                              <1> pusha
   179                              <1> pushf
   180                              <1> push dword %1
   181                              <1> pop eax
   182                              <1>     cmp eax,0
   183                              <1>     jge %%m5
   184                              <1>     PUTCHAR '-'
   185                              <1>     neg eax
   186                              <1> %%m5:
   187                              <1>       UNSINT eax
   188                              <1> popf
   189                              <1> popa
   190                              <1> %endmacro
     2                                  global _start
     3                                  section .data
     4 00000000 07                      n db 7
     5 00000001 01                      a db 1
     6 00000002 00                      b db 0
     7                                  section .text
     8                                  
     9                                  fib:
    10                                  PRINT "1"
    10 00000000 60                  <1>  pusha
    10 00000001 9C                  <1>  pushf
    10 00000002 EB02                <1>  jmp %%astr
    10 00000004 3100                <1> %%str db %1, 0
    10                              <1> %%strln equ $-%%str
    10                              <1> %%astr: _syscall_write 1, %%str, %%strln
    10                              <2> ..@3.astr: 
    10                              <2>  _syscall_3 4,%1,%2,%3
    10 00000006 52                  <3>  push edx
    10 00000007 51                  <3>  push ecx
    10 00000008 53                  <3>  push ebx
    10 00000009 6A04                <3>  push %1
    10 0000000B 6A01                <3>  push %2
    10 0000000D 68[04000000]        <3>  push %3
    10 00000012 6A02                <3>  push %4
    10 00000014 5A                  <3>  pop edx
    10 00000015 59                  <3>  pop ecx
    10 00000016 5B                  <3>  pop ebx
    10 00000017 58                  <3>  pop eax
    10 00000018 CD80                <3>  int 0x80
    10 0000001A 5B                  <3>  pop ebx
    10 0000001B 59                  <3>  pop ecx
    10 0000001C 5A                  <3>  pop edx
    10 0000001D 9D                  <1>  popf
    10 0000001E 61                  <1>  popa
    11                                  PUTCHAR 0xa
    11 0000001F 60                  <1>  pusha
    11 00000020 9C                  <1>  pushf
    11                              <1> %ifstr %1
    11                              <1>  mov al, %1
    11                              <1> %elifnum %1
    11 00000021 B00A                <1>  mov al, %1
    11                              <1> %elifidni %1,al
    11                              <1>  nop
    11                              <1> %elifidni %1,ah
    11                              <1>  mov al, ah
    11                              <1> %elifidni %1,bl
    11                              <1>  mov al, bl
    11                              <1> %elifidni %1,bh
    11                              <1>  mov al, bh
    11                              <1> %elifidni %1,cl
    11                              <1>  mov al, cl
    11                              <1> %elifidni %1,ch
    11                              <1>  mov al, ch
    11                              <1> %elifidni %1,dl
    11                              <1>  mov al, dl
    11                              <1> %elifidni %1,dh
    11                              <1>  mov al, dh
    11                              <1> %else
    11                              <1>  mov al, %1
    11                              <1> %endif
    11 00000023 83EC02              <1>  sub esp, 2
    11 00000026 89E7                <1>  mov edi, esp
    11 00000028 8807                <1>  mov [edi], al
    11                              <1>  _syscall_write 1, edi, 1
    11                              <2>  _syscall_3 4,%1,%2,%3
    11 0000002A 52                  <3>  push edx
    11 0000002B 51                  <3>  push ecx
    11 0000002C 53                  <3>  push ebx
    11 0000002D 6A04                <3>  push %1
    11 0000002F 6A01                <3>  push %2
    11 00000031 57                  <3>  push %3
    11 00000032 6A01                <3>  push %4
    11 00000034 5A                  <3>  pop edx
    11 00000035 59                  <3>  pop ecx
    11 00000036 5B                  <3>  pop ebx
    11 00000037 58                  <3>  pop eax
    11 00000038 CD80                <3>  int 0x80
    11 0000003A 5B                  <3>  pop ebx
    11 0000003B 59                  <3>  pop ecx
    11 0000003C 5A                  <3>  pop edx
    11 0000003D 83C402              <1>  add esp, 2
    11 00000040 9D                  <1>  popf
    11 00000041 61                  <1>  popa
    12                                  l:
    13 00000042 B302                    mov bl,2
    14 00000044 6689C8                  mov ax,cx
    15 00000047 F6F3                    div bl
    16 00000049 80FC00                  cmp ah, 0
    17 0000004C 770C                    ja metka1
    18 0000004E E9D3000000              jmp metka2
    19                                  emet1:
    20                                  emet2:
    21 00000053 E2ED                    loop l
    22 00000055 E998010000               jmp finish
    23                                  metka1:
    24 0000005A 31C0                    xor eax, eax
    25 0000005C A0[01000000]            mov al, [a]
    26                                  UNSINT eax
    26 00000061 60                  <1> pusha
    26 00000062 9C                  <1> pushf
    26 00000063 50                  <1> push dword %1
    26 00000064 58                  <1> pop eax
    26 00000065 89C7                <1> mov edi,eax
    26 00000067 BE0A000000          <1> mov esi,10
    26 0000006C 31DB                <1>  xor ebx,ebx
    26                              <1> %%m1:
    26 0000006E 31D2                <1>  xor edx,edx
    26 00000070 F7F6                <1>  div esi
    26 00000072 43                  <1>  inc ebx
    26 00000073 83F800              <1>  cmp eax,0
    26 00000076 75F6                <1>  jne %%m1
    26                              <1> 
    26 00000078 B801000000          <1>  mov eax,1
    26 0000007D 89D9                <1>  mov ecx,ebx
    26 0000007F 49                  <1>  dec ecx
    26                              <1> 
    26 00000080 83F900              <1>  cmp ecx,0
    26 00000083 7441                <1>  je %%m4
    26 00000085 F7E6                <1> %%m2: mul esi
    26 00000087 E2FC                <1>  loop %%m2
    26                              <1> 
    26 00000089 89C3                <1>  mov ebx,eax
    26                              <1> 
    26                              <1> %%m3:
    26 0000008B 89F8                <1>  mov eax,edi
    26 0000008D 31D2                <1>  xor edx,edx
    26 0000008F F7F3                <1>  div ebx
    26 00000091 0430                <1>  add al,'0'
    26                              <1>  PUTCHAR al
    26 00000093 60                  <2>  pusha
    26 00000094 9C                  <2>  pushf
    26                              <2> %ifstr %1
    26                              <2>  mov al, %1
    26                              <2> %elifnum %1
    26                              <2>  mov al, %1
    26                              <2> %elifidni %1,al
    26 00000095 90                  <2>  nop
    26                              <2> %elifidni %1,ah
    26                              <2>  mov al, ah
    26                              <2> %elifidni %1,bl
    26                              <2>  mov al, bl
    26                              <2> %elifidni %1,bh
    26                              <2>  mov al, bh
    26                              <2> %elifidni %1,cl
    26                              <2>  mov al, cl
    26                              <2> %elifidni %1,ch
    26                              <2>  mov al, ch
    26                              <2> %elifidni %1,dl
    26                              <2>  mov al, dl
    26                              <2> %elifidni %1,dh
    26                              <2>  mov al, dh
    26                              <2> %else
    26                              <2>  mov al, %1
    26                              <2> %endif
    26 00000096 83EC02              <2>  sub esp, 2
    26 00000099 89E7                <2>  mov edi, esp
    26 0000009B 8807                <2>  mov [edi], al
    26                              <2>  _syscall_write 1, edi, 1
    26                              <3>  _syscall_3 4,%1,%2,%3
    26 0000009D 52                  <4>  push edx
    26 0000009E 51                  <4>  push ecx
    26 0000009F 53                  <4>  push ebx
    26 000000A0 6A04                <4>  push %1
    26 000000A2 6A01                <4>  push %2
    26 000000A4 57                  <4>  push %3
    26 000000A5 6A01                <4>  push %4
    26 000000A7 5A                  <4>  pop edx
    26 000000A8 59                  <4>  pop ecx
    26 000000A9 5B                  <4>  pop ebx
    26 000000AA 58                  <4>  pop eax
    26 000000AB CD80                <4>  int 0x80
    26 000000AD 5B                  <4>  pop ebx
    26 000000AE 59                  <4>  pop ecx
    26 000000AF 5A                  <4>  pop edx
    26 000000B0 83C402              <2>  add esp, 2
    26 000000B3 9D                  <2>  popf
    26 000000B4 61                  <2>  popa
    26 000000B5 89D7                <1>  mov edi,edx
    26 000000B7 31D2                <1>  xor edx,edx
    26 000000B9 89D8                <1>  mov eax,ebx
    26 000000BB F7F6                <1>  div esi
    26 000000BD 83F801              <1>  cmp eax,1
    26 000000C0 7404                <1>  je %%m4
    26 000000C2 89C3                <1>  mov ebx,eax
    26 000000C4 EBC5                <1>  jmp %%m3
    26                              <1>  %%m4:
    26 000000C6 89FA                <1>  mov edx,edi
    26 000000C8 80C230              <1>  add dl,'0'
    26                              <1>  PUTCHAR dl
    26 000000CB 60                  <2>  pusha
    26 000000CC 9C                  <2>  pushf
    26                              <2> %ifstr %1
    26                              <2>  mov al, %1
    26                              <2> %elifnum %1
    26                              <2>  mov al, %1
    26                              <2> %elifidni %1,al
    26                              <2>  nop
    26                              <2> %elifidni %1,ah
    26                              <2>  mov al, ah
    26                              <2> %elifidni %1,bl
    26                              <2>  mov al, bl
    26                              <2> %elifidni %1,bh
    26                              <2>  mov al, bh
    26                              <2> %elifidni %1,cl
    26                              <2>  mov al, cl
    26                              <2> %elifidni %1,ch
    26                              <2>  mov al, ch
    26                              <2> %elifidni %1,dl
    26 000000CD 88D0                <2>  mov al, dl
    26                              <2> %elifidni %1,dh
    26                              <2>  mov al, dh
    26                              <2> %else
    26                              <2>  mov al, %1
    26                              <2> %endif
    26 000000CF 83EC02              <2>  sub esp, 2
    26 000000D2 89E7                <2>  mov edi, esp
    26 000000D4 8807                <2>  mov [edi], al
    26                              <2>  _syscall_write 1, edi, 1
    26                              <3>  _syscall_3 4,%1,%2,%3
    26 000000D6 52                  <4>  push edx
    26 000000D7 51                  <4>  push ecx
    26 000000D8 53                  <4>  push ebx
    26 000000D9 6A04                <4>  push %1
    26 000000DB 6A01                <4>  push %2
    26 000000DD 57                  <4>  push %3
    26 000000DE 6A01                <4>  push %4
    26 000000E0 5A                  <4>  pop edx
    26 000000E1 59                  <4>  pop ecx
    26 000000E2 5B                  <4>  pop ebx
    26 000000E3 58                  <4>  pop eax
    26 000000E4 CD80                <4>  int 0x80
    26 000000E6 5B                  <4>  pop ebx
    26 000000E7 59                  <4>  pop ecx
    26 000000E8 5A                  <4>  pop edx
    26 000000E9 83C402              <2>  add esp, 2
    26 000000EC 9D                  <2>  popf
    26 000000ED 61                  <2>  popa
    26                              <1> 
    26                              <1> 
    26 000000EE 9D                  <1> popf
    26 000000EF 61                  <1> popa
    27                                  PUTCHAR 0xA
    27 000000F0 60                  <1>  pusha
    27 000000F1 9C                  <1>  pushf
    27                              <1> %ifstr %1
    27                              <1>  mov al, %1
    27                              <1> %elifnum %1
    27 000000F2 B00A                <1>  mov al, %1
    27                              <1> %elifidni %1,al
    27                              <1>  nop
    27                              <1> %elifidni %1,ah
    27                              <1>  mov al, ah
    27                              <1> %elifidni %1,bl
    27                              <1>  mov al, bl
    27                              <1> %elifidni %1,bh
    27                              <1>  mov al, bh
    27                              <1> %elifidni %1,cl
    27                              <1>  mov al, cl
    27                              <1> %elifidni %1,ch
    27                              <1>  mov al, ch
    27                              <1> %elifidni %1,dl
    27                              <1>  mov al, dl
    27                              <1> %elifidni %1,dh
    27                              <1>  mov al, dh
    27                              <1> %else
    27                              <1>  mov al, %1
    27                              <1> %endif
    27 000000F4 83EC02              <1>  sub esp, 2
    27 000000F7 89E7                <1>  mov edi, esp
    27 000000F9 8807                <1>  mov [edi], al
    27                              <1>  _syscall_write 1, edi, 1
    27                              <2>  _syscall_3 4,%1,%2,%3
    27 000000FB 52                  <3>  push edx
    27 000000FC 51                  <3>  push ecx
    27 000000FD 53                  <3>  push ebx
    27 000000FE 6A04                <3>  push %1
    27 00000100 6A01                <3>  push %2
    27 00000102 57                  <3>  push %3
    27 00000103 6A01                <3>  push %4
    27 00000105 5A                  <3>  pop edx
    27 00000106 59                  <3>  pop ecx
    27 00000107 5B                  <3>  pop ebx
    27 00000108 58                  <3>  pop eax
    27 00000109 CD80                <3>  int 0x80
    27 0000010B 5B                  <3>  pop ebx
    27 0000010C 59                  <3>  pop ecx
    27 0000010D 5A                  <3>  pop edx
    27 0000010E 83C402              <1>  add esp, 2
    27 00000111 9D                  <1>  popf
    27 00000112 61                  <1>  popa
    28 00000113 8A1D[02000000]          mov bl, [b] 
    29 00000119 00C3                    add bl, al
    30 0000011B 881D[02000000]          mov [b], bl 
    31 00000121 E92DFFFFFF              jmp emet1
    32                                  
    33                                  metka2:
    34 00000126 31C0                    xor eax, eax
    35 00000128 A0[02000000]            mov al,[ b]
    36                                  UNSINT eax 
    36 0000012D 60                  <1> pusha
    36 0000012E 9C                  <1> pushf
    36 0000012F 50                  <1> push dword %1
    36 00000130 58                  <1> pop eax
    36 00000131 89C7                <1> mov edi,eax
    36 00000133 BE0A000000          <1> mov esi,10
    36 00000138 31DB                <1>  xor ebx,ebx
    36                              <1> %%m1:
    36 0000013A 31D2                <1>  xor edx,edx
    36 0000013C F7F6                <1>  div esi
    36 0000013E 43                  <1>  inc ebx
    36 0000013F 83F800              <1>  cmp eax,0
    36 00000142 75F6                <1>  jne %%m1
    36                              <1> 
    36 00000144 B801000000          <1>  mov eax,1
    36 00000149 89D9                <1>  mov ecx,ebx
    36 0000014B 49                  <1>  dec ecx
    36                              <1> 
    36 0000014C 83F900              <1>  cmp ecx,0
    36 0000014F 7441                <1>  je %%m4
    36 00000151 F7E6                <1> %%m2: mul esi
    36 00000153 E2FC                <1>  loop %%m2
    36                              <1> 
    36 00000155 89C3                <1>  mov ebx,eax
    36                              <1> 
    36                              <1> %%m3:
    36 00000157 89F8                <1>  mov eax,edi
    36 00000159 31D2                <1>  xor edx,edx
    36 0000015B F7F3                <1>  div ebx
    36 0000015D 0430                <1>  add al,'0'
    36                              <1>  PUTCHAR al
    36 0000015F 60                  <2>  pusha
    36 00000160 9C                  <2>  pushf
    36                              <2> %ifstr %1
    36                              <2>  mov al, %1
    36                              <2> %elifnum %1
    36                              <2>  mov al, %1
    36                              <2> %elifidni %1,al
    36 00000161 90                  <2>  nop
    36                              <2> %elifidni %1,ah
    36                              <2>  mov al, ah
    36                              <2> %elifidni %1,bl
    36                              <2>  mov al, bl
    36                              <2> %elifidni %1,bh
    36                              <2>  mov al, bh
    36                              <2> %elifidni %1,cl
    36                              <2>  mov al, cl
    36                              <2> %elifidni %1,ch
    36                              <2>  mov al, ch
    36                              <2> %elifidni %1,dl
    36                              <2>  mov al, dl
    36                              <2> %elifidni %1,dh
    36                              <2>  mov al, dh
    36                              <2> %else
    36                              <2>  mov al, %1
    36                              <2> %endif
    36 00000162 83EC02              <2>  sub esp, 2
    36 00000165 89E7                <2>  mov edi, esp
    36 00000167 8807                <2>  mov [edi], al
    36                              <2>  _syscall_write 1, edi, 1
    36                              <3>  _syscall_3 4,%1,%2,%3
    36 00000169 52                  <4>  push edx
    36 0000016A 51                  <4>  push ecx
    36 0000016B 53                  <4>  push ebx
    36 0000016C 6A04                <4>  push %1
    36 0000016E 6A01                <4>  push %2
    36 00000170 57                  <4>  push %3
    36 00000171 6A01                <4>  push %4
    36 00000173 5A                  <4>  pop edx
    36 00000174 59                  <4>  pop ecx
    36 00000175 5B                  <4>  pop ebx
    36 00000176 58                  <4>  pop eax
    36 00000177 CD80                <4>  int 0x80
    36 00000179 5B                  <4>  pop ebx
    36 0000017A 59                  <4>  pop ecx
    36 0000017B 5A                  <4>  pop edx
    36 0000017C 83C402              <2>  add esp, 2
    36 0000017F 9D                  <2>  popf
    36 00000180 61                  <2>  popa
    36 00000181 89D7                <1>  mov edi,edx
    36 00000183 31D2                <1>  xor edx,edx
    36 00000185 89D8                <1>  mov eax,ebx
    36 00000187 F7F6                <1>  div esi
    36 00000189 83F801              <1>  cmp eax,1
    36 0000018C 7404                <1>  je %%m4
    36 0000018E 89C3                <1>  mov ebx,eax
    36 00000190 EBC5                <1>  jmp %%m3
    36                              <1>  %%m4:
    36 00000192 89FA                <1>  mov edx,edi
    36 00000194 80C230              <1>  add dl,'0'
    36                              <1>  PUTCHAR dl
    36 00000197 60                  <2>  pusha
    36 00000198 9C                  <2>  pushf
    36                              <2> %ifstr %1
    36                              <2>  mov al, %1
    36                              <2> %elifnum %1
    36                              <2>  mov al, %1
    36                              <2> %elifidni %1,al
    36                              <2>  nop
    36                              <2> %elifidni %1,ah
    36                              <2>  mov al, ah
    36                              <2> %elifidni %1,bl
    36                              <2>  mov al, bl
    36                              <2> %elifidni %1,bh
    36                              <2>  mov al, bh
    36                              <2> %elifidni %1,cl
    36                              <2>  mov al, cl
    36                              <2> %elifidni %1,ch
    36                              <2>  mov al, ch
    36                              <2> %elifidni %1,dl
    36 00000199 88D0                <2>  mov al, dl
    36                              <2> %elifidni %1,dh
    36                              <2>  mov al, dh
    36                              <2> %else
    36                              <2>  mov al, %1
    36                              <2> %endif
    36 0000019B 83EC02              <2>  sub esp, 2
    36 0000019E 89E7                <2>  mov edi, esp
    36 000001A0 8807                <2>  mov [edi], al
    36                              <2>  _syscall_write 1, edi, 1
    36                              <3>  _syscall_3 4,%1,%2,%3
    36 000001A2 52                  <4>  push edx
    36 000001A3 51                  <4>  push ecx
    36 000001A4 53                  <4>  push ebx
    36 000001A5 6A04                <4>  push %1
    36 000001A7 6A01                <4>  push %2
    36 000001A9 57                  <4>  push %3
    36 000001AA 6A01                <4>  push %4
    36 000001AC 5A                  <4>  pop edx
    36 000001AD 59                  <4>  pop ecx
    36 000001AE 5B                  <4>  pop ebx
    36 000001AF 58                  <4>  pop eax
    36 000001B0 CD80                <4>  int 0x80
    36 000001B2 5B                  <4>  pop ebx
    36 000001B3 59                  <4>  pop ecx
    36 000001B4 5A                  <4>  pop edx
    36 000001B5 83C402              <2>  add esp, 2
    36 000001B8 9D                  <2>  popf
    36 000001B9 61                  <2>  popa
    36                              <1> 
    36                              <1> 
    36 000001BA 9D                  <1> popf
    36 000001BB 61                  <1> popa
    37                                  PUTCHAR 0xa
    37 000001BC 60                  <1>  pusha
    37 000001BD 9C                  <1>  pushf
    37                              <1> %ifstr %1
    37                              <1>  mov al, %1
    37                              <1> %elifnum %1
    37 000001BE B00A                <1>  mov al, %1
    37                              <1> %elifidni %1,al
    37                              <1>  nop
    37                              <1> %elifidni %1,ah
    37                              <1>  mov al, ah
    37                              <1> %elifidni %1,bl
    37                              <1>  mov al, bl
    37                              <1> %elifidni %1,bh
    37                              <1>  mov al, bh
    37                              <1> %elifidni %1,cl
    37                              <1>  mov al, cl
    37                              <1> %elifidni %1,ch
    37                              <1>  mov al, ch
    37                              <1> %elifidni %1,dl
    37                              <1>  mov al, dl
    37                              <1> %elifidni %1,dh
    37                              <1>  mov al, dh
    37                              <1> %else
    37                              <1>  mov al, %1
    37                              <1> %endif
    37 000001C0 83EC02              <1>  sub esp, 2
    37 000001C3 89E7                <1>  mov edi, esp
    37 000001C5 8807                <1>  mov [edi], al
    37                              <1>  _syscall_write 1, edi, 1
    37                              <2>  _syscall_3 4,%1,%2,%3
    37 000001C7 52                  <3>  push edx
    37 000001C8 51                  <3>  push ecx
    37 000001C9 53                  <3>  push ebx
    37 000001CA 6A04                <3>  push %1
    37 000001CC 6A01                <3>  push %2
    37 000001CE 57                  <3>  push %3
    37 000001CF 6A01                <3>  push %4
    37 000001D1 5A                  <3>  pop edx
    37 000001D2 59                  <3>  pop ecx
    37 000001D3 5B                  <3>  pop ebx
    37 000001D4 58                  <3>  pop eax
    37 000001D5 CD80                <3>  int 0x80
    37 000001D7 5B                  <3>  pop ebx
    37 000001D8 59                  <3>  pop ecx
    37 000001D9 5A                  <3>  pop edx
    37 000001DA 83C402              <1>  add esp, 2
    37 000001DD 9D                  <1>  popf
    37 000001DE 61                  <1>  popa
    38 000001DF 8A1D[01000000]          mov bl, [a]
    39 000001E5 00C3                    add bl, al
    40 000001E7 881D[01000000]          mov [a], bl
    41 000001ED E961FEFFFF              jmp emet2
    42                                   finish:
    43 000001F2 C3                      ret
    44                                  
    45                                  _start:
    46 000001F3 B907000000              	mov ecx,7
    47 000001F8 E803FEFFFF              	call fib
    48                                  	PUTCHAR 0xA
    48 000001FD 60                  <1>  pusha
    48 000001FE 9C                  <1>  pushf
    48                              <1> %ifstr %1
    48                              <1>  mov al, %1
    48                              <1> %elifnum %1
    48 000001FF B00A                <1>  mov al, %1
    48                              <1> %elifidni %1,al
    48                              <1>  nop
    48                              <1> %elifidni %1,ah
    48                              <1>  mov al, ah
    48                              <1> %elifidni %1,bl
    48                              <1>  mov al, bl
    48                              <1> %elifidni %1,bh
    48                              <1>  mov al, bh
    48                              <1> %elifidni %1,cl
    48                              <1>  mov al, cl
    48                              <1> %elifidni %1,ch
    48                              <1>  mov al, ch
    48                              <1> %elifidni %1,dl
    48                              <1>  mov al, dl
    48                              <1> %elifidni %1,dh
    48                              <1>  mov al, dh
    48                              <1> %else
    48                              <1>  mov al, %1
    48                              <1> %endif
    48 00000201 83EC02              <1>  sub esp, 2
    48 00000204 89E7                <1>  mov edi, esp
    48 00000206 8807                <1>  mov [edi], al
    48                              <1>  _syscall_write 1, edi, 1
    48                              <2>  _syscall_3 4,%1,%2,%3
    48 00000208 52                  <3>  push edx
    48 00000209 51                  <3>  push ecx
    48 0000020A 53                  <3>  push ebx
    48 0000020B 6A04                <3>  push %1
    48 0000020D 6A01                <3>  push %2
    48 0000020F 57                  <3>  push %3
    48 00000210 6A01                <3>  push %4
    48 00000212 5A                  <3>  pop edx
    48 00000213 59                  <3>  pop ecx
    48 00000214 5B                  <3>  pop ebx
    48 00000215 58                  <3>  pop eax
    48 00000216 CD80                <3>  int 0x80
    48 00000218 5B                  <3>  pop ebx
    48 00000219 59                  <3>  pop ecx
    48 0000021A 5A                  <3>  pop edx
    48 0000021B 83C402              <1>  add esp, 2
    48 0000021E 9D                  <1>  popf
    48 0000021F 61                  <1>  popa
    49                                  FINISH
    49                              <1>  _syscall_exit %1
    49 00000220 BB00000000          <2>  mov ebx, %1
    49 00000225 B801000000          <2>  mov eax, 1
    49 0000022A CD80                <2>  int 0x80
    50                                  
    51                                  
    52                                  
    53                                  
    54                                  
    55                                  
    56                                  
    57                                  
    58                                  
    59                                  
    60                                  
