     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020) 
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax 
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1>     
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:       
   155                              <1>       mov eax,edi 
   156                              <1>       xor edx,edx 
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:      
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1>        
   173                              <1>   
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2: 
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx 
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR 
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx 
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx 
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi 
   308                              <1> %%m_p: 
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
   325                              <1> 
   326                              <1> 
   327                              <1> 
   328                              <1> 
     2                                  global _start
     3                                  section .data
     4 00000000 090203040506070809       mas db 9,2,3,4,5,6,7,8,9
     5                                  
     6                                  section .text
     7                                  _start:
     8                                  
     9 00000000 B800000000              mov eax, 0
    10 00000005 BB00000000              mov ebx, 0
    11 0000000A B903000000              mov ecx, 3
    12 0000000F 8A15[00000000]          mov dl,[mas]
    13                                  l:
    14 00000015 89CE                    mov esi, ecx
    15 00000017 B903000000              mov ecx, 3
    16                                  
    17                                  l1: 
    18 0000001C 3A9418[00000000]        cmp dl, [mas+eax+ebx*1]
    19 00000023 720B                    jb met
    20                                  
    21 00000025 B200                    mov dl, 0
    22 00000027 8A9418[00000000]        mov dl, [mas+eax+ebx*1]
    23 0000002E 89DD                    mov ebp, ebx
    24                                  
    25                                  met:
    26 00000030 43                      inc ebx
    27 00000031 E2E9                    loop l1
    28                                  
    29 00000033 BB00000000              mov ebx, 0
    30 00000038 83C003                  add eax, 3
    31 0000003B 89F1                    mov ecx, esi
    32 0000003D E2D6                    loop l
    33                                  
    34 0000003F B800000000              mov eax, 0
    35 00000044 88D0                    mov al, dl
    36                                  UNSINT eax
    36 00000046 60                  <1> pusha
    36 00000047 9C                  <1> pushf
    36 00000048 50                  <1> push dword %1
    36 00000049 58                  <1> pop eax
    36 0000004A 89C7                <1> mov edi,eax
    36 0000004C BE0A000000          <1> mov esi,10
    36 00000051 31DB                <1>  xor ebx,ebx
    36                              <1> %%m1:
    36 00000053 31D2                <1>  xor edx,edx
    36 00000055 F7F6                <1>  div esi
    36 00000057 43                  <1>  inc ebx
    36 00000058 83F800              <1>  cmp eax,0
    36 0000005B 75F6                <1>  jne %%m1
    36                              <1> 
    36 0000005D B801000000          <1>  mov eax,1
    36 00000062 89D9                <1>  mov ecx,ebx
    36 00000064 49                  <1>  dec ecx
    36                              <1> 
    36 00000065 83F900              <1>  cmp ecx,0
    36 00000068 7441                <1>  je %%m4
    36 0000006A F7E6                <1> %%m2: mul esi
    36 0000006C E2FC                <1>  loop %%m2
    36                              <1> 
    36 0000006E 89C3                <1>  mov ebx,eax
    36                              <1> 
    36                              <1> %%m3:
    36 00000070 89F8                <1>  mov eax,edi
    36 00000072 31D2                <1>  xor edx,edx
    36 00000074 F7F3                <1>  div ebx
    36 00000076 0430                <1>  add al,'0'
    36                              <1>  PUTCHAR al
    36 00000078 60                  <2>  pusha
    36 00000079 9C                  <2>  pushf
    36                              <2> %ifstr %1
    36                              <2>  mov al, %1
    36                              <2> %elifnum %1
    36                              <2>  mov al, %1
    36                              <2> %elifidni %1,al
    36 0000007A 90                  <2>  nop
    36                              <2> %elifidni %1,ah
    36                              <2>  mov al, ah
    36                              <2> %elifidni %1,bl
    36                              <2>  mov al, bl
    36                              <2> %elifidni %1,bh
    36                              <2>  mov al, bh
    36                              <2> %elifidni %1,cl
    36                              <2>  mov al, cl
    36                              <2> %elifidni %1,ch
    36                              <2>  mov al, ch
    36                              <2> %elifidni %1,dl
    36                              <2>  mov al, dl
    36                              <2> %elifidni %1,dh
    36                              <2>  mov al, dh
    36                              <2> %else
    36                              <2>  mov al, %1
    36                              <2> %endif
    36 0000007B 83EC02              <2>  sub esp, 2
    36 0000007E 89E7                <2>  mov edi, esp
    36 00000080 8807                <2>  mov [edi], al
    36                              <2>  _syscall_write 1, edi, 1
    36                              <3>  _syscall_3 4,%1,%2,%3
    36 00000082 52                  <4>  push edx
    36 00000083 51                  <4>  push ecx
    36 00000084 53                  <4>  push ebx
    36 00000085 6A04                <4>  push %1
    36 00000087 6A01                <4>  push %2
    36 00000089 57                  <4>  push %3
    36 0000008A 6A01                <4>  push %4
    36 0000008C 5A                  <4>  pop edx
    36 0000008D 59                  <4>  pop ecx
    36 0000008E 5B                  <4>  pop ebx
    36 0000008F 58                  <4>  pop eax
    36 00000090 CD80                <4>  int 0x80
    36 00000092 5B                  <4>  pop ebx
    36 00000093 59                  <4>  pop ecx
    36 00000094 5A                  <4>  pop edx
    36 00000095 83C402              <2>  add esp, 2
    36 00000098 9D                  <2>  popf
    36 00000099 61                  <2>  popa
    36 0000009A 89D7                <1>  mov edi,edx
    36 0000009C 31D2                <1>  xor edx,edx
    36 0000009E 89D8                <1>  mov eax,ebx
    36 000000A0 F7F6                <1>  div esi
    36 000000A2 83F801              <1>  cmp eax,1
    36 000000A5 7404                <1>  je %%m4
    36 000000A7 89C3                <1>  mov ebx,eax
    36 000000A9 EBC5                <1>  jmp %%m3
    36                              <1>  %%m4:
    36 000000AB 89FA                <1>  mov edx,edi
    36 000000AD 80C230              <1>  add dl,'0'
    36                              <1>  PUTCHAR dl
    36 000000B0 60                  <2>  pusha
    36 000000B1 9C                  <2>  pushf
    36                              <2> %ifstr %1
    36                              <2>  mov al, %1
    36                              <2> %elifnum %1
    36                              <2>  mov al, %1
    36                              <2> %elifidni %1,al
    36                              <2>  nop
    36                              <2> %elifidni %1,ah
    36                              <2>  mov al, ah
    36                              <2> %elifidni %1,bl
    36                              <2>  mov al, bl
    36                              <2> %elifidni %1,bh
    36                              <2>  mov al, bh
    36                              <2> %elifidni %1,cl
    36                              <2>  mov al, cl
    36                              <2> %elifidni %1,ch
    36                              <2>  mov al, ch
    36                              <2> %elifidni %1,dl
    36 000000B2 88D0                <2>  mov al, dl
    36                              <2> %elifidni %1,dh
    36                              <2>  mov al, dh
    36                              <2> %else
    36                              <2>  mov al, %1
    36                              <2> %endif
    36 000000B4 83EC02              <2>  sub esp, 2
    36 000000B7 89E7                <2>  mov edi, esp
    36 000000B9 8807                <2>  mov [edi], al
    36                              <2>  _syscall_write 1, edi, 1
    36                              <3>  _syscall_3 4,%1,%2,%3
    36 000000BB 52                  <4>  push edx
    36 000000BC 51                  <4>  push ecx
    36 000000BD 53                  <4>  push ebx
    36 000000BE 6A04                <4>  push %1
    36 000000C0 6A01                <4>  push %2
    36 000000C2 57                  <4>  push %3
    36 000000C3 6A01                <4>  push %4
    36 000000C5 5A                  <4>  pop edx
    36 000000C6 59                  <4>  pop ecx
    36 000000C7 5B                  <4>  pop ebx
    36 000000C8 58                  <4>  pop eax
    36 000000C9 CD80                <4>  int 0x80
    36 000000CB 5B                  <4>  pop ebx
    36 000000CC 59                  <4>  pop ecx
    36 000000CD 5A                  <4>  pop edx
    36 000000CE 83C402              <2>  add esp, 2
    36 000000D1 9D                  <2>  popf
    36 000000D2 61                  <2>  popa
    36                              <1> 
    36                              <1> 
    36 000000D3 9D                  <1> popf
    36 000000D4 61                  <1> popa
    37                                  PUTCHAR 0xa
    37 000000D5 60                  <1>  pusha
    37 000000D6 9C                  <1>  pushf
    37                              <1> %ifstr %1
    37                              <1>  mov al, %1
    37                              <1> %elifnum %1
    37 000000D7 B00A                <1>  mov al, %1
    37                              <1> %elifidni %1,al
    37                              <1>  nop
    37                              <1> %elifidni %1,ah
    37                              <1>  mov al, ah
    37                              <1> %elifidni %1,bl
    37                              <1>  mov al, bl
    37                              <1> %elifidni %1,bh
    37                              <1>  mov al, bh
    37                              <1> %elifidni %1,cl
    37                              <1>  mov al, cl
    37                              <1> %elifidni %1,ch
    37                              <1>  mov al, ch
    37                              <1> %elifidni %1,dl
    37                              <1>  mov al, dl
    37                              <1> %elifidni %1,dh
    37                              <1>  mov al, dh
    37                              <1> %else
    37                              <1>  mov al, %1
    37                              <1> %endif
    37 000000D9 83EC02              <1>  sub esp, 2
    37 000000DC 89E7                <1>  mov edi, esp
    37 000000DE 8807                <1>  mov [edi], al
    37                              <1>  _syscall_write 1, edi, 1
    37                              <2>  _syscall_3 4,%1,%2,%3
    37 000000E0 52                  <3>  push edx
    37 000000E1 51                  <3>  push ecx
    37 000000E2 53                  <3>  push ebx
    37 000000E3 6A04                <3>  push %1
    37 000000E5 6A01                <3>  push %2
    37 000000E7 57                  <3>  push %3
    37 000000E8 6A01                <3>  push %4
    37 000000EA 5A                  <3>  pop edx
    37 000000EB 59                  <3>  pop ecx
    37 000000EC 5B                  <3>  pop ebx
    37 000000ED 58                  <3>  pop eax
    37 000000EE CD80                <3>  int 0x80
    37 000000F0 5B                  <3>  pop ebx
    37 000000F1 59                  <3>  pop ecx
    37 000000F2 5A                  <3>  pop edx
    37 000000F3 83C402              <1>  add esp, 2
    37 000000F6 9D                  <1>  popf
    37 000000F7 61                  <1>  popa
    38 000000F8 BB00000000              mov ebx,0
    39 000000FD 89EB                    mov ebx,ebp
    40                                  UNSINT ebx
    40 000000FF 60                  <1> pusha
    40 00000100 9C                  <1> pushf
    40 00000101 53                  <1> push dword %1
    40 00000102 58                  <1> pop eax
    40 00000103 89C7                <1> mov edi,eax
    40 00000105 BE0A000000          <1> mov esi,10
    40 0000010A 31DB                <1>  xor ebx,ebx
    40                              <1> %%m1:
    40 0000010C 31D2                <1>  xor edx,edx
    40 0000010E F7F6                <1>  div esi
    40 00000110 43                  <1>  inc ebx
    40 00000111 83F800              <1>  cmp eax,0
    40 00000114 75F6                <1>  jne %%m1
    40                              <1> 
    40 00000116 B801000000          <1>  mov eax,1
    40 0000011B 89D9                <1>  mov ecx,ebx
    40 0000011D 49                  <1>  dec ecx
    40                              <1> 
    40 0000011E 83F900              <1>  cmp ecx,0
    40 00000121 7441                <1>  je %%m4
    40 00000123 F7E6                <1> %%m2: mul esi
    40 00000125 E2FC                <1>  loop %%m2
    40                              <1> 
    40 00000127 89C3                <1>  mov ebx,eax
    40                              <1> 
    40                              <1> %%m3:
    40 00000129 89F8                <1>  mov eax,edi
    40 0000012B 31D2                <1>  xor edx,edx
    40 0000012D F7F3                <1>  div ebx
    40 0000012F 0430                <1>  add al,'0'
    40                              <1>  PUTCHAR al
    40 00000131 60                  <2>  pusha
    40 00000132 9C                  <2>  pushf
    40                              <2> %ifstr %1
    40                              <2>  mov al, %1
    40                              <2> %elifnum %1
    40                              <2>  mov al, %1
    40                              <2> %elifidni %1,al
    40 00000133 90                  <2>  nop
    40                              <2> %elifidni %1,ah
    40                              <2>  mov al, ah
    40                              <2> %elifidni %1,bl
    40                              <2>  mov al, bl
    40                              <2> %elifidni %1,bh
    40                              <2>  mov al, bh
    40                              <2> %elifidni %1,cl
    40                              <2>  mov al, cl
    40                              <2> %elifidni %1,ch
    40                              <2>  mov al, ch
    40                              <2> %elifidni %1,dl
    40                              <2>  mov al, dl
    40                              <2> %elifidni %1,dh
    40                              <2>  mov al, dh
    40                              <2> %else
    40                              <2>  mov al, %1
    40                              <2> %endif
    40 00000134 83EC02              <2>  sub esp, 2
    40 00000137 89E7                <2>  mov edi, esp
    40 00000139 8807                <2>  mov [edi], al
    40                              <2>  _syscall_write 1, edi, 1
    40                              <3>  _syscall_3 4,%1,%2,%3
    40 0000013B 52                  <4>  push edx
    40 0000013C 51                  <4>  push ecx
    40 0000013D 53                  <4>  push ebx
    40 0000013E 6A04                <4>  push %1
    40 00000140 6A01                <4>  push %2
    40 00000142 57                  <4>  push %3
    40 00000143 6A01                <4>  push %4
    40 00000145 5A                  <4>  pop edx
    40 00000146 59                  <4>  pop ecx
    40 00000147 5B                  <4>  pop ebx
    40 00000148 58                  <4>  pop eax
    40 00000149 CD80                <4>  int 0x80
    40 0000014B 5B                  <4>  pop ebx
    40 0000014C 59                  <4>  pop ecx
    40 0000014D 5A                  <4>  pop edx
    40 0000014E 83C402              <2>  add esp, 2
    40 00000151 9D                  <2>  popf
    40 00000152 61                  <2>  popa
    40 00000153 89D7                <1>  mov edi,edx
    40 00000155 31D2                <1>  xor edx,edx
    40 00000157 89D8                <1>  mov eax,ebx
    40 00000159 F7F6                <1>  div esi
    40 0000015B 83F801              <1>  cmp eax,1
    40 0000015E 7404                <1>  je %%m4
    40 00000160 89C3                <1>  mov ebx,eax
    40 00000162 EBC5                <1>  jmp %%m3
    40                              <1>  %%m4:
    40 00000164 89FA                <1>  mov edx,edi
    40 00000166 80C230              <1>  add dl,'0'
    40                              <1>  PUTCHAR dl
    40 00000169 60                  <2>  pusha
    40 0000016A 9C                  <2>  pushf
    40                              <2> %ifstr %1
    40                              <2>  mov al, %1
    40                              <2> %elifnum %1
    40                              <2>  mov al, %1
    40                              <2> %elifidni %1,al
    40                              <2>  nop
    40                              <2> %elifidni %1,ah
    40                              <2>  mov al, ah
    40                              <2> %elifidni %1,bl
    40                              <2>  mov al, bl
    40                              <2> %elifidni %1,bh
    40                              <2>  mov al, bh
    40                              <2> %elifidni %1,cl
    40                              <2>  mov al, cl
    40                              <2> %elifidni %1,ch
    40                              <2>  mov al, ch
    40                              <2> %elifidni %1,dl
    40 0000016B 88D0                <2>  mov al, dl
    40                              <2> %elifidni %1,dh
    40                              <2>  mov al, dh
    40                              <2> %else
    40                              <2>  mov al, %1
    40                              <2> %endif
    40 0000016D 83EC02              <2>  sub esp, 2
    40 00000170 89E7                <2>  mov edi, esp
    40 00000172 8807                <2>  mov [edi], al
    40                              <2>  _syscall_write 1, edi, 1
    40                              <3>  _syscall_3 4,%1,%2,%3
    40 00000174 52                  <4>  push edx
    40 00000175 51                  <4>  push ecx
    40 00000176 53                  <4>  push ebx
    40 00000177 6A04                <4>  push %1
    40 00000179 6A01                <4>  push %2
    40 0000017B 57                  <4>  push %3
    40 0000017C 6A01                <4>  push %4
    40 0000017E 5A                  <4>  pop edx
    40 0000017F 59                  <4>  pop ecx
    40 00000180 5B                  <4>  pop ebx
    40 00000181 58                  <4>  pop eax
    40 00000182 CD80                <4>  int 0x80
    40 00000184 5B                  <4>  pop ebx
    40 00000185 59                  <4>  pop ecx
    40 00000186 5A                  <4>  pop edx
    40 00000187 83C402              <2>  add esp, 2
    40 0000018A 9D                  <2>  popf
    40 0000018B 61                  <2>  popa
    40                              <1> 
    40                              <1> 
    40 0000018C 9D                  <1> popf
    40 0000018D 61                  <1> popa
    41                                  PUTCHAR 0xA
    41 0000018E 60                  <1>  pusha
    41 0000018F 9C                  <1>  pushf
    41                              <1> %ifstr %1
    41                              <1>  mov al, %1
    41                              <1> %elifnum %1
    41 00000190 B00A                <1>  mov al, %1
    41                              <1> %elifidni %1,al
    41                              <1>  nop
    41                              <1> %elifidni %1,ah
    41                              <1>  mov al, ah
    41                              <1> %elifidni %1,bl
    41                              <1>  mov al, bl
    41                              <1> %elifidni %1,bh
    41                              <1>  mov al, bh
    41                              <1> %elifidni %1,cl
    41                              <1>  mov al, cl
    41                              <1> %elifidni %1,ch
    41                              <1>  mov al, ch
    41                              <1> %elifidni %1,dl
    41                              <1>  mov al, dl
    41                              <1> %elifidni %1,dh
    41                              <1>  mov al, dh
    41                              <1> %else
    41                              <1>  mov al, %1
    41                              <1> %endif
    41 00000192 83EC02              <1>  sub esp, 2
    41 00000195 89E7                <1>  mov edi, esp
    41 00000197 8807                <1>  mov [edi], al
    41                              <1>  _syscall_write 1, edi, 1
    41                              <2>  _syscall_3 4,%1,%2,%3
    41 00000199 52                  <3>  push edx
    41 0000019A 51                  <3>  push ecx
    41 0000019B 53                  <3>  push ebx
    41 0000019C 6A04                <3>  push %1
    41 0000019E 6A01                <3>  push %2
    41 000001A0 57                  <3>  push %3
    41 000001A1 6A01                <3>  push %4
    41 000001A3 5A                  <3>  pop edx
    41 000001A4 59                  <3>  pop ecx
    41 000001A5 5B                  <3>  pop ebx
    41 000001A6 58                  <3>  pop eax
    41 000001A7 CD80                <3>  int 0x80
    41 000001A9 5B                  <3>  pop ebx
    41 000001AA 59                  <3>  pop ecx
    41 000001AB 5A                  <3>  pop edx
    41 000001AC 83C402              <1>  add esp, 2
    41 000001AF 9D                  <1>  popf
    41 000001B0 61                  <1>  popa
    42                                  FINISH
    42                              <1>  _syscall_exit %1
    42 000001B1 BB00000000          <2>  mov ebx, %1
    42 000001B6 B801000000          <2>  mov eax, 1
    42 000001BB CD80                <2>  int 0x80
    43                                  
