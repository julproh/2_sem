     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020) 
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax 
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1>     
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:       
   155                              <1>       mov eax,edi 
   156                              <1>       xor edx,edx 
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:      
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1>        
   173                              <1>   
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2: 
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx 
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR 
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx 
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx 
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi 
   308                              <1> %%m_p: 
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
   325                              <1> 
   326                              <1> 
   327                              <1> 
   328                              <1> 
     2                                  global _start
     3                                  section .data
     4                                  section .text
     5                                  _start:
     6 00000000 66B86900                mov ax, 1101001b
     7 00000004 66BB6A00                mov bx, 1101010b
     8                                  
     9 00000008 66B90700                mov cx, 111b
    10 0000000C 6621C1                  and cx, ax
    11                                  
    12 0000000F 66C1E80C                shr ax, 12
    13 00000013 66C1E00C                shl ax, 12
    14                                  
    15 00000017 6689DA                  mov dx, bx
    16 0000001A 6681E20070              and dx, 111000000000000b
    17 0000001F 66C1EA0C                shr dx, 12
    18                                  
    19 00000023 6609D0                  or ax, dx
    20                                  
    21 00000026 66C1E10C                shl cx, 12
    22 0000002A 66C1E303                shl bx, 3
    23 0000002E 66C1EB03                shr bx, 3
    24                                  
    25 00000032 6609CB                  or bx, cx
    26                                  
    27                                  UNSINT eax
    27 00000035 60                  <1> pusha
    27 00000036 9C                  <1> pushf
    27 00000037 50                  <1> push dword %1
    27 00000038 58                  <1> pop eax
    27 00000039 89C7                <1> mov edi,eax
    27 0000003B BE0A000000          <1> mov esi,10
    27 00000040 31DB                <1>  xor ebx,ebx
    27                              <1> %%m1:
    27 00000042 31D2                <1>  xor edx,edx
    27 00000044 F7F6                <1>  div esi
    27 00000046 43                  <1>  inc ebx
    27 00000047 83F800              <1>  cmp eax,0
    27 0000004A 75F6                <1>  jne %%m1
    27                              <1> 
    27 0000004C B801000000          <1>  mov eax,1
    27 00000051 89D9                <1>  mov ecx,ebx
    27 00000053 49                  <1>  dec ecx
    27                              <1> 
    27 00000054 83F900              <1>  cmp ecx,0
    27 00000057 7441                <1>  je %%m4
    27 00000059 F7E6                <1> %%m2: mul esi
    27 0000005B E2FC                <1>  loop %%m2
    27                              <1> 
    27 0000005D 89C3                <1>  mov ebx,eax
    27                              <1> 
    27                              <1> %%m3:
    27 0000005F 89F8                <1>  mov eax,edi
    27 00000061 31D2                <1>  xor edx,edx
    27 00000063 F7F3                <1>  div ebx
    27 00000065 0430                <1>  add al,'0'
    27                              <1>  PUTCHAR al
    27 00000067 60                  <2>  pusha
    27 00000068 9C                  <2>  pushf
    27                              <2> %ifstr %1
    27                              <2>  mov al, %1
    27                              <2> %elifnum %1
    27                              <2>  mov al, %1
    27                              <2> %elifidni %1,al
    27 00000069 90                  <2>  nop
    27                              <2> %elifidni %1,ah
    27                              <2>  mov al, ah
    27                              <2> %elifidni %1,bl
    27                              <2>  mov al, bl
    27                              <2> %elifidni %1,bh
    27                              <2>  mov al, bh
    27                              <2> %elifidni %1,cl
    27                              <2>  mov al, cl
    27                              <2> %elifidni %1,ch
    27                              <2>  mov al, ch
    27                              <2> %elifidni %1,dl
    27                              <2>  mov al, dl
    27                              <2> %elifidni %1,dh
    27                              <2>  mov al, dh
    27                              <2> %else
    27                              <2>  mov al, %1
    27                              <2> %endif
    27 0000006A 83EC02              <2>  sub esp, 2
    27 0000006D 89E7                <2>  mov edi, esp
    27 0000006F 8807                <2>  mov [edi], al
    27                              <2>  _syscall_write 1, edi, 1
    27                              <3>  _syscall_3 4,%1,%2,%3
    27 00000071 52                  <4>  push edx
    27 00000072 51                  <4>  push ecx
    27 00000073 53                  <4>  push ebx
    27 00000074 6A04                <4>  push %1
    27 00000076 6A01                <4>  push %2
    27 00000078 57                  <4>  push %3
    27 00000079 6A01                <4>  push %4
    27 0000007B 5A                  <4>  pop edx
    27 0000007C 59                  <4>  pop ecx
    27 0000007D 5B                  <4>  pop ebx
    27 0000007E 58                  <4>  pop eax
    27 0000007F CD80                <4>  int 0x80
    27 00000081 5B                  <4>  pop ebx
    27 00000082 59                  <4>  pop ecx
    27 00000083 5A                  <4>  pop edx
    27 00000084 83C402              <2>  add esp, 2
    27 00000087 9D                  <2>  popf
    27 00000088 61                  <2>  popa
    27 00000089 89D7                <1>  mov edi,edx
    27 0000008B 31D2                <1>  xor edx,edx
    27 0000008D 89D8                <1>  mov eax,ebx
    27 0000008F F7F6                <1>  div esi
    27 00000091 83F801              <1>  cmp eax,1
    27 00000094 7404                <1>  je %%m4
    27 00000096 89C3                <1>  mov ebx,eax
    27 00000098 EBC5                <1>  jmp %%m3
    27                              <1>  %%m4:
    27 0000009A 89FA                <1>  mov edx,edi
    27 0000009C 80C230              <1>  add dl,'0'
    27                              <1>  PUTCHAR dl
    27 0000009F 60                  <2>  pusha
    27 000000A0 9C                  <2>  pushf
    27                              <2> %ifstr %1
    27                              <2>  mov al, %1
    27                              <2> %elifnum %1
    27                              <2>  mov al, %1
    27                              <2> %elifidni %1,al
    27                              <2>  nop
    27                              <2> %elifidni %1,ah
    27                              <2>  mov al, ah
    27                              <2> %elifidni %1,bl
    27                              <2>  mov al, bl
    27                              <2> %elifidni %1,bh
    27                              <2>  mov al, bh
    27                              <2> %elifidni %1,cl
    27                              <2>  mov al, cl
    27                              <2> %elifidni %1,ch
    27                              <2>  mov al, ch
    27                              <2> %elifidni %1,dl
    27 000000A1 88D0                <2>  mov al, dl
    27                              <2> %elifidni %1,dh
    27                              <2>  mov al, dh
    27                              <2> %else
    27                              <2>  mov al, %1
    27                              <2> %endif
    27 000000A3 83EC02              <2>  sub esp, 2
    27 000000A6 89E7                <2>  mov edi, esp
    27 000000A8 8807                <2>  mov [edi], al
    27                              <2>  _syscall_write 1, edi, 1
    27                              <3>  _syscall_3 4,%1,%2,%3
    27 000000AA 52                  <4>  push edx
    27 000000AB 51                  <4>  push ecx
    27 000000AC 53                  <4>  push ebx
    27 000000AD 6A04                <4>  push %1
    27 000000AF 6A01                <4>  push %2
    27 000000B1 57                  <4>  push %3
    27 000000B2 6A01                <4>  push %4
    27 000000B4 5A                  <4>  pop edx
    27 000000B5 59                  <4>  pop ecx
    27 000000B6 5B                  <4>  pop ebx
    27 000000B7 58                  <4>  pop eax
    27 000000B8 CD80                <4>  int 0x80
    27 000000BA 5B                  <4>  pop ebx
    27 000000BB 59                  <4>  pop ecx
    27 000000BC 5A                  <4>  pop edx
    27 000000BD 83C402              <2>  add esp, 2
    27 000000C0 9D                  <2>  popf
    27 000000C1 61                  <2>  popa
    27                              <1> 
    27                              <1> 
    27 000000C2 9D                  <1> popf
    27 000000C3 61                  <1> popa
    28                                  PUTCHAR 0xa
    28 000000C4 60                  <1>  pusha
    28 000000C5 9C                  <1>  pushf
    28                              <1> %ifstr %1
    28                              <1>  mov al, %1
    28                              <1> %elifnum %1
    28 000000C6 B00A                <1>  mov al, %1
    28                              <1> %elifidni %1,al
    28                              <1>  nop
    28                              <1> %elifidni %1,ah
    28                              <1>  mov al, ah
    28                              <1> %elifidni %1,bl
    28                              <1>  mov al, bl
    28                              <1> %elifidni %1,bh
    28                              <1>  mov al, bh
    28                              <1> %elifidni %1,cl
    28                              <1>  mov al, cl
    28                              <1> %elifidni %1,ch
    28                              <1>  mov al, ch
    28                              <1> %elifidni %1,dl
    28                              <1>  mov al, dl
    28                              <1> %elifidni %1,dh
    28                              <1>  mov al, dh
    28                              <1> %else
    28                              <1>  mov al, %1
    28                              <1> %endif
    28 000000C8 83EC02              <1>  sub esp, 2
    28 000000CB 89E7                <1>  mov edi, esp
    28 000000CD 8807                <1>  mov [edi], al
    28                              <1>  _syscall_write 1, edi, 1
    28                              <2>  _syscall_3 4,%1,%2,%3
    28 000000CF 52                  <3>  push edx
    28 000000D0 51                  <3>  push ecx
    28 000000D1 53                  <3>  push ebx
    28 000000D2 6A04                <3>  push %1
    28 000000D4 6A01                <3>  push %2
    28 000000D6 57                  <3>  push %3
    28 000000D7 6A01                <3>  push %4
    28 000000D9 5A                  <3>  pop edx
    28 000000DA 59                  <3>  pop ecx
    28 000000DB 5B                  <3>  pop ebx
    28 000000DC 58                  <3>  pop eax
    28 000000DD CD80                <3>  int 0x80
    28 000000DF 5B                  <3>  pop ebx
    28 000000E0 59                  <3>  pop ecx
    28 000000E1 5A                  <3>  pop edx
    28 000000E2 83C402              <1>  add esp, 2
    28 000000E5 9D                  <1>  popf
    28 000000E6 61                  <1>  popa
    29                                  UNSINT ebx
    29 000000E7 60                  <1> pusha
    29 000000E8 9C                  <1> pushf
    29 000000E9 53                  <1> push dword %1
    29 000000EA 58                  <1> pop eax
    29 000000EB 89C7                <1> mov edi,eax
    29 000000ED BE0A000000          <1> mov esi,10
    29 000000F2 31DB                <1>  xor ebx,ebx
    29                              <1> %%m1:
    29 000000F4 31D2                <1>  xor edx,edx
    29 000000F6 F7F6                <1>  div esi
    29 000000F8 43                  <1>  inc ebx
    29 000000F9 83F800              <1>  cmp eax,0
    29 000000FC 75F6                <1>  jne %%m1
    29                              <1> 
    29 000000FE B801000000          <1>  mov eax,1
    29 00000103 89D9                <1>  mov ecx,ebx
    29 00000105 49                  <1>  dec ecx
    29                              <1> 
    29 00000106 83F900              <1>  cmp ecx,0
    29 00000109 7441                <1>  je %%m4
    29 0000010B F7E6                <1> %%m2: mul esi
    29 0000010D E2FC                <1>  loop %%m2
    29                              <1> 
    29 0000010F 89C3                <1>  mov ebx,eax
    29                              <1> 
    29                              <1> %%m3:
    29 00000111 89F8                <1>  mov eax,edi
    29 00000113 31D2                <1>  xor edx,edx
    29 00000115 F7F3                <1>  div ebx
    29 00000117 0430                <1>  add al,'0'
    29                              <1>  PUTCHAR al
    29 00000119 60                  <2>  pusha
    29 0000011A 9C                  <2>  pushf
    29                              <2> %ifstr %1
    29                              <2>  mov al, %1
    29                              <2> %elifnum %1
    29                              <2>  mov al, %1
    29                              <2> %elifidni %1,al
    29 0000011B 90                  <2>  nop
    29                              <2> %elifidni %1,ah
    29                              <2>  mov al, ah
    29                              <2> %elifidni %1,bl
    29                              <2>  mov al, bl
    29                              <2> %elifidni %1,bh
    29                              <2>  mov al, bh
    29                              <2> %elifidni %1,cl
    29                              <2>  mov al, cl
    29                              <2> %elifidni %1,ch
    29                              <2>  mov al, ch
    29                              <2> %elifidni %1,dl
    29                              <2>  mov al, dl
    29                              <2> %elifidni %1,dh
    29                              <2>  mov al, dh
    29                              <2> %else
    29                              <2>  mov al, %1
    29                              <2> %endif
    29 0000011C 83EC02              <2>  sub esp, 2
    29 0000011F 89E7                <2>  mov edi, esp
    29 00000121 8807                <2>  mov [edi], al
    29                              <2>  _syscall_write 1, edi, 1
    29                              <3>  _syscall_3 4,%1,%2,%3
    29 00000123 52                  <4>  push edx
    29 00000124 51                  <4>  push ecx
    29 00000125 53                  <4>  push ebx
    29 00000126 6A04                <4>  push %1
    29 00000128 6A01                <4>  push %2
    29 0000012A 57                  <4>  push %3
    29 0000012B 6A01                <4>  push %4
    29 0000012D 5A                  <4>  pop edx
    29 0000012E 59                  <4>  pop ecx
    29 0000012F 5B                  <4>  pop ebx
    29 00000130 58                  <4>  pop eax
    29 00000131 CD80                <4>  int 0x80
    29 00000133 5B                  <4>  pop ebx
    29 00000134 59                  <4>  pop ecx
    29 00000135 5A                  <4>  pop edx
    29 00000136 83C402              <2>  add esp, 2
    29 00000139 9D                  <2>  popf
    29 0000013A 61                  <2>  popa
    29 0000013B 89D7                <1>  mov edi,edx
    29 0000013D 31D2                <1>  xor edx,edx
    29 0000013F 89D8                <1>  mov eax,ebx
    29 00000141 F7F6                <1>  div esi
    29 00000143 83F801              <1>  cmp eax,1
    29 00000146 7404                <1>  je %%m4
    29 00000148 89C3                <1>  mov ebx,eax
    29 0000014A EBC5                <1>  jmp %%m3
    29                              <1>  %%m4:
    29 0000014C 89FA                <1>  mov edx,edi
    29 0000014E 80C230              <1>  add dl,'0'
    29                              <1>  PUTCHAR dl
    29 00000151 60                  <2>  pusha
    29 00000152 9C                  <2>  pushf
    29                              <2> %ifstr %1
    29                              <2>  mov al, %1
    29                              <2> %elifnum %1
    29                              <2>  mov al, %1
    29                              <2> %elifidni %1,al
    29                              <2>  nop
    29                              <2> %elifidni %1,ah
    29                              <2>  mov al, ah
    29                              <2> %elifidni %1,bl
    29                              <2>  mov al, bl
    29                              <2> %elifidni %1,bh
    29                              <2>  mov al, bh
    29                              <2> %elifidni %1,cl
    29                              <2>  mov al, cl
    29                              <2> %elifidni %1,ch
    29                              <2>  mov al, ch
    29                              <2> %elifidni %1,dl
    29 00000153 88D0                <2>  mov al, dl
    29                              <2> %elifidni %1,dh
    29                              <2>  mov al, dh
    29                              <2> %else
    29                              <2>  mov al, %1
    29                              <2> %endif
    29 00000155 83EC02              <2>  sub esp, 2
    29 00000158 89E7                <2>  mov edi, esp
    29 0000015A 8807                <2>  mov [edi], al
    29                              <2>  _syscall_write 1, edi, 1
    29                              <3>  _syscall_3 4,%1,%2,%3
    29 0000015C 52                  <4>  push edx
    29 0000015D 51                  <4>  push ecx
    29 0000015E 53                  <4>  push ebx
    29 0000015F 6A04                <4>  push %1
    29 00000161 6A01                <4>  push %2
    29 00000163 57                  <4>  push %3
    29 00000164 6A01                <4>  push %4
    29 00000166 5A                  <4>  pop edx
    29 00000167 59                  <4>  pop ecx
    29 00000168 5B                  <4>  pop ebx
    29 00000169 58                  <4>  pop eax
    29 0000016A CD80                <4>  int 0x80
    29 0000016C 5B                  <4>  pop ebx
    29 0000016D 59                  <4>  pop ecx
    29 0000016E 5A                  <4>  pop edx
    29 0000016F 83C402              <2>  add esp, 2
    29 00000172 9D                  <2>  popf
    29 00000173 61                  <2>  popa
    29                              <1> 
    29                              <1> 
    29 00000174 9D                  <1> popf
    29 00000175 61                  <1> popa
    30                                  PUTCHAR 0xA
    30 00000176 60                  <1>  pusha
    30 00000177 9C                  <1>  pushf
    30                              <1> %ifstr %1
    30                              <1>  mov al, %1
    30                              <1> %elifnum %1
    30 00000178 B00A                <1>  mov al, %1
    30                              <1> %elifidni %1,al
    30                              <1>  nop
    30                              <1> %elifidni %1,ah
    30                              <1>  mov al, ah
    30                              <1> %elifidni %1,bl
    30                              <1>  mov al, bl
    30                              <1> %elifidni %1,bh
    30                              <1>  mov al, bh
    30                              <1> %elifidni %1,cl
    30                              <1>  mov al, cl
    30                              <1> %elifidni %1,ch
    30                              <1>  mov al, ch
    30                              <1> %elifidni %1,dl
    30                              <1>  mov al, dl
    30                              <1> %elifidni %1,dh
    30                              <1>  mov al, dh
    30                              <1> %else
    30                              <1>  mov al, %1
    30                              <1> %endif
    30 0000017A 83EC02              <1>  sub esp, 2
    30 0000017D 89E7                <1>  mov edi, esp
    30 0000017F 8807                <1>  mov [edi], al
    30                              <1>  _syscall_write 1, edi, 1
    30                              <2>  _syscall_3 4,%1,%2,%3
    30 00000181 52                  <3>  push edx
    30 00000182 51                  <3>  push ecx
    30 00000183 53                  <3>  push ebx
    30 00000184 6A04                <3>  push %1
    30 00000186 6A01                <3>  push %2
    30 00000188 57                  <3>  push %3
    30 00000189 6A01                <3>  push %4
    30 0000018B 5A                  <3>  pop edx
    30 0000018C 59                  <3>  pop ecx
    30 0000018D 5B                  <3>  pop ebx
    30 0000018E 58                  <3>  pop eax
    30 0000018F CD80                <3>  int 0x80
    30 00000191 5B                  <3>  pop ebx
    30 00000192 59                  <3>  pop ecx
    30 00000193 5A                  <3>  pop edx
    30 00000194 83C402              <1>  add esp, 2
    30 00000197 9D                  <1>  popf
    30 00000198 61                  <1>  popa
    31                                  FINISH
    31                              <1>  _syscall_exit %1
    31 00000199 BB00000000          <2>  mov ebx, %1
    31 0000019E B801000000          <2>  mov eax, 1
    31 000001A3 CD80                <2>  int 0x80
