     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020) 
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax 
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length 
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1>     
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:       
   155                              <1>       mov eax,edi 
   156                              <1>       xor edx,edx 
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:      
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1>        
   173                              <1>   
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2: 
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx 
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR 
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx 
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx 
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi 
   308                              <1> %%m_p: 
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
   325                              <1> 
   326                              <1> 
   327                              <1> 
   328                              <1> 
     2                                  
     3                                  global _start
     4                                  section .data
     5                                  
     6                                  section .text
     7                                  _start:
     8                                  
     9                                  ; меням sf
    10                                  
    11 00000000 B000                    mov al, 0
    12 00000002 2C05                    sub al, 5
    13 00000004 9C                      pushf
    14 00000005 5B                      pop ebx
    15 00000006 83F340                  xor ebx, 1000000b
    16 00000009 53                      push ebx
    17 0000000A 9D                      popf
    18                                  
    19 0000000B 7847                    js metka
    20                                  PRINT "ZERO"
    20 0000000D 60                  <1>  pusha
    20 0000000E 9C                  <1>  pushf
    20 0000000F EB05                <1>  jmp %%astr
    20 00000011 5A45524F00          <1> %%str db %1, 0
    20                              <1> %%strln equ $-%%str
    20                              <1> %%astr: _syscall_write 1, %%str, %%strln
    20                              <2> ..@3.astr: 
    20                              <2>  _syscall_3 4,%1,%2,%3
    20 00000016 52                  <3>  push edx
    20 00000017 51                  <3>  push ecx
    20 00000018 53                  <3>  push ebx
    20 00000019 6A04                <3>  push %1
    20 0000001B 6A01                <3>  push %2
    20 0000001D 68[11000000]        <3>  push %3
    20 00000022 6A05                <3>  push %4
    20 00000024 5A                  <3>  pop edx
    20 00000025 59                  <3>  pop ecx
    20 00000026 5B                  <3>  pop ebx
    20 00000027 58                  <3>  pop eax
    20 00000028 CD80                <3>  int 0x80
    20 0000002A 5B                  <3>  pop ebx
    20 0000002B 59                  <3>  pop ecx
    20 0000002C 5A                  <3>  pop edx
    20 0000002D 9D                  <1>  popf
    20 0000002E 61                  <1>  popa
    21                                  PUTCHAR 0xa
    21 0000002F 60                  <1>  pusha
    21 00000030 9C                  <1>  pushf
    21                              <1> %ifstr %1
    21                              <1>  mov al, %1
    21                              <1> %elifnum %1
    21 00000031 B00A                <1>  mov al, %1
    21                              <1> %elifidni %1,al
    21                              <1>  nop
    21                              <1> %elifidni %1,ah
    21                              <1>  mov al, ah
    21                              <1> %elifidni %1,bl
    21                              <1>  mov al, bl
    21                              <1> %elifidni %1,bh
    21                              <1>  mov al, bh
    21                              <1> %elifidni %1,cl
    21                              <1>  mov al, cl
    21                              <1> %elifidni %1,ch
    21                              <1>  mov al, ch
    21                              <1> %elifidni %1,dl
    21                              <1>  mov al, dl
    21                              <1> %elifidni %1,dh
    21                              <1>  mov al, dh
    21                              <1> %else
    21                              <1>  mov al, %1
    21                              <1> %endif
    21 00000033 83EC02              <1>  sub esp, 2
    21 00000036 89E7                <1>  mov edi, esp
    21 00000038 8807                <1>  mov [edi], al
    21                              <1>  _syscall_write 1, edi, 1
    21                              <2>  _syscall_3 4,%1,%2,%3
    21 0000003A 52                  <3>  push edx
    21 0000003B 51                  <3>  push ecx
    21 0000003C 53                  <3>  push ebx
    21 0000003D 6A04                <3>  push %1
    21 0000003F 6A01                <3>  push %2
    21 00000041 57                  <3>  push %3
    21 00000042 6A01                <3>  push %4
    21 00000044 5A                  <3>  pop edx
    21 00000045 59                  <3>  pop ecx
    21 00000046 5B                  <3>  pop ebx
    21 00000047 58                  <3>  pop eax
    21 00000048 CD80                <3>  int 0x80
    21 0000004A 5B                  <3>  pop ebx
    21 0000004B 59                  <3>  pop ecx
    21 0000004C 5A                  <3>  pop edx
    21 0000004D 83C402              <1>  add esp, 2
    21 00000050 9D                  <1>  popf
    21 00000051 61                  <1>  popa
    22 00000052 EB44                    jmp t
    23                                  metka: 
    24                                  PRINT "ONE"
    24 00000054 60                  <1>  pusha
    24 00000055 9C                  <1>  pushf
    24 00000056 EB04                <1>  jmp %%astr
    24 00000058 4F4E4500            <1> %%str db %1, 0
    24                              <1> %%strln equ $-%%str
    24                              <1> %%astr: _syscall_write 1, %%str, %%strln
    24                              <2> ..@9.astr: 
    24                              <2>  _syscall_3 4,%1,%2,%3
    24 0000005C 52                  <3>  push edx
    24 0000005D 51                  <3>  push ecx
    24 0000005E 53                  <3>  push ebx
    24 0000005F 6A04                <3>  push %1
    24 00000061 6A01                <3>  push %2
    24 00000063 68[58000000]        <3>  push %3
    24 00000068 6A04                <3>  push %4
    24 0000006A 5A                  <3>  pop edx
    24 0000006B 59                  <3>  pop ecx
    24 0000006C 5B                  <3>  pop ebx
    24 0000006D 58                  <3>  pop eax
    24 0000006E CD80                <3>  int 0x80
    24 00000070 5B                  <3>  pop ebx
    24 00000071 59                  <3>  pop ecx
    24 00000072 5A                  <3>  pop edx
    24 00000073 9D                  <1>  popf
    24 00000074 61                  <1>  popa
    25                                  PUTCHAR 0xa
    25 00000075 60                  <1>  pusha
    25 00000076 9C                  <1>  pushf
    25                              <1> %ifstr %1
    25                              <1>  mov al, %1
    25                              <1> %elifnum %1
    25 00000077 B00A                <1>  mov al, %1
    25                              <1> %elifidni %1,al
    25                              <1>  nop
    25                              <1> %elifidni %1,ah
    25                              <1>  mov al, ah
    25                              <1> %elifidni %1,bl
    25                              <1>  mov al, bl
    25                              <1> %elifidni %1,bh
    25                              <1>  mov al, bh
    25                              <1> %elifidni %1,cl
    25                              <1>  mov al, cl
    25                              <1> %elifidni %1,ch
    25                              <1>  mov al, ch
    25                              <1> %elifidni %1,dl
    25                              <1>  mov al, dl
    25                              <1> %elifidni %1,dh
    25                              <1>  mov al, dh
    25                              <1> %else
    25                              <1>  mov al, %1
    25                              <1> %endif
    25 00000079 83EC02              <1>  sub esp, 2
    25 0000007C 89E7                <1>  mov edi, esp
    25 0000007E 8807                <1>  mov [edi], al
    25                              <1>  _syscall_write 1, edi, 1
    25                              <2>  _syscall_3 4,%1,%2,%3
    25 00000080 52                  <3>  push edx
    25 00000081 51                  <3>  push ecx
    25 00000082 53                  <3>  push ebx
    25 00000083 6A04                <3>  push %1
    25 00000085 6A01                <3>  push %2
    25 00000087 57                  <3>  push %3
    25 00000088 6A01                <3>  push %4
    25 0000008A 5A                  <3>  pop edx
    25 0000008B 59                  <3>  pop ecx
    25 0000008C 5B                  <3>  pop ebx
    25 0000008D 58                  <3>  pop eax
    25 0000008E CD80                <3>  int 0x80
    25 00000090 5B                  <3>  pop ebx
    25 00000091 59                  <3>  pop ecx
    25 00000092 5A                  <3>  pop edx
    25 00000093 83C402              <1>  add esp, 2
    25 00000096 9D                  <1>  popf
    25 00000097 61                  <1>  popa
    26                                  t:
    27                                  ; меняем zf
    28                                  
    29 00000098 B000                    mov al, 0
    30 0000009A 0401                    add al, 1
    31 0000009C 9C                      pushf
    32 0000009D 5B                      pop ebx
    33 0000009E 83F320                  xor ebx, 100000b
    34 000000A1 53                      push ebx
    35 000000A2 9D                      popf
    36                                  
    37 000000A3 7447                    jz metka1
    38                                  PRINT "ZERO"
    38 000000A5 60                  <1>  pusha
    38 000000A6 9C                  <1>  pushf
    38 000000A7 EB05                <1>  jmp %%astr
    38 000000A9 5A45524F00          <1> %%str db %1, 0
    38                              <1> %%strln equ $-%%str
    38                              <1> %%astr: _syscall_write 1, %%str, %%strln
    38                              <2> ..@15.astr: 
    38                              <2>  _syscall_3 4,%1,%2,%3
    38 000000AE 52                  <3>  push edx
    38 000000AF 51                  <3>  push ecx
    38 000000B0 53                  <3>  push ebx
    38 000000B1 6A04                <3>  push %1
    38 000000B3 6A01                <3>  push %2
    38 000000B5 68[A9000000]        <3>  push %3
    38 000000BA 6A05                <3>  push %4
    38 000000BC 5A                  <3>  pop edx
    38 000000BD 59                  <3>  pop ecx
    38 000000BE 5B                  <3>  pop ebx
    38 000000BF 58                  <3>  pop eax
    38 000000C0 CD80                <3>  int 0x80
    38 000000C2 5B                  <3>  pop ebx
    38 000000C3 59                  <3>  pop ecx
    38 000000C4 5A                  <3>  pop edx
    38 000000C5 9D                  <1>  popf
    38 000000C6 61                  <1>  popa
    39                                  PUTCHAR 0xa
    39 000000C7 60                  <1>  pusha
    39 000000C8 9C                  <1>  pushf
    39                              <1> %ifstr %1
    39                              <1>  mov al, %1
    39                              <1> %elifnum %1
    39 000000C9 B00A                <1>  mov al, %1
    39                              <1> %elifidni %1,al
    39                              <1>  nop
    39                              <1> %elifidni %1,ah
    39                              <1>  mov al, ah
    39                              <1> %elifidni %1,bl
    39                              <1>  mov al, bl
    39                              <1> %elifidni %1,bh
    39                              <1>  mov al, bh
    39                              <1> %elifidni %1,cl
    39                              <1>  mov al, cl
    39                              <1> %elifidni %1,ch
    39                              <1>  mov al, ch
    39                              <1> %elifidni %1,dl
    39                              <1>  mov al, dl
    39                              <1> %elifidni %1,dh
    39                              <1>  mov al, dh
    39                              <1> %else
    39                              <1>  mov al, %1
    39                              <1> %endif
    39 000000CB 83EC02              <1>  sub esp, 2
    39 000000CE 89E7                <1>  mov edi, esp
    39 000000D0 8807                <1>  mov [edi], al
    39                              <1>  _syscall_write 1, edi, 1
    39                              <2>  _syscall_3 4,%1,%2,%3
    39 000000D2 52                  <3>  push edx
    39 000000D3 51                  <3>  push ecx
    39 000000D4 53                  <3>  push ebx
    39 000000D5 6A04                <3>  push %1
    39 000000D7 6A01                <3>  push %2
    39 000000D9 57                  <3>  push %3
    39 000000DA 6A01                <3>  push %4
    39 000000DC 5A                  <3>  pop edx
    39 000000DD 59                  <3>  pop ecx
    39 000000DE 5B                  <3>  pop ebx
    39 000000DF 58                  <3>  pop eax
    39 000000E0 CD80                <3>  int 0x80
    39 000000E2 5B                  <3>  pop ebx
    39 000000E3 59                  <3>  pop ecx
    39 000000E4 5A                  <3>  pop edx
    39 000000E5 83C402              <1>  add esp, 2
    39 000000E8 9D                  <1>  popf
    39 000000E9 61                  <1>  popa
    40 000000EA EB44                    jmp en
    41                                  metka1:
    42                                  PRINT "ONE"
    42 000000EC 60                  <1>  pusha
    42 000000ED 9C                  <1>  pushf
    42 000000EE EB04                <1>  jmp %%astr
    42 000000F0 4F4E4500            <1> %%str db %1, 0
    42                              <1> %%strln equ $-%%str
    42                              <1> %%astr: _syscall_write 1, %%str, %%strln
    42                              <2> ..@21.astr: 
    42                              <2>  _syscall_3 4,%1,%2,%3
    42 000000F4 52                  <3>  push edx
    42 000000F5 51                  <3>  push ecx
    42 000000F6 53                  <3>  push ebx
    42 000000F7 6A04                <3>  push %1
    42 000000F9 6A01                <3>  push %2
    42 000000FB 68[F0000000]        <3>  push %3
    42 00000100 6A04                <3>  push %4
    42 00000102 5A                  <3>  pop edx
    42 00000103 59                  <3>  pop ecx
    42 00000104 5B                  <3>  pop ebx
    42 00000105 58                  <3>  pop eax
    42 00000106 CD80                <3>  int 0x80
    42 00000108 5B                  <3>  pop ebx
    42 00000109 59                  <3>  pop ecx
    42 0000010A 5A                  <3>  pop edx
    42 0000010B 9D                  <1>  popf
    42 0000010C 61                  <1>  popa
    43                                  PUTCHAR 0xa
    43 0000010D 60                  <1>  pusha
    43 0000010E 9C                  <1>  pushf
    43                              <1> %ifstr %1
    43                              <1>  mov al, %1
    43                              <1> %elifnum %1
    43 0000010F B00A                <1>  mov al, %1
    43                              <1> %elifidni %1,al
    43                              <1>  nop
    43                              <1> %elifidni %1,ah
    43                              <1>  mov al, ah
    43                              <1> %elifidni %1,bl
    43                              <1>  mov al, bl
    43                              <1> %elifidni %1,bh
    43                              <1>  mov al, bh
    43                              <1> %elifidni %1,cl
    43                              <1>  mov al, cl
    43                              <1> %elifidni %1,ch
    43                              <1>  mov al, ch
    43                              <1> %elifidni %1,dl
    43                              <1>  mov al, dl
    43                              <1> %elifidni %1,dh
    43                              <1>  mov al, dh
    43                              <1> %else
    43                              <1>  mov al, %1
    43                              <1> %endif
    43 00000111 83EC02              <1>  sub esp, 2
    43 00000114 89E7                <1>  mov edi, esp
    43 00000116 8807                <1>  mov [edi], al
    43                              <1>  _syscall_write 1, edi, 1
    43                              <2>  _syscall_3 4,%1,%2,%3
    43 00000118 52                  <3>  push edx
    43 00000119 51                  <3>  push ecx
    43 0000011A 53                  <3>  push ebx
    43 0000011B 6A04                <3>  push %1
    43 0000011D 6A01                <3>  push %2
    43 0000011F 57                  <3>  push %3
    43 00000120 6A01                <3>  push %4
    43 00000122 5A                  <3>  pop edx
    43 00000123 59                  <3>  pop ecx
    43 00000124 5B                  <3>  pop ebx
    43 00000125 58                  <3>  pop eax
    43 00000126 CD80                <3>  int 0x80
    43 00000128 5B                  <3>  pop ebx
    43 00000129 59                  <3>  pop ecx
    43 0000012A 5A                  <3>  pop edx
    43 0000012B 83C402              <1>  add esp, 2
    43 0000012E 9D                  <1>  popf
    43 0000012F 61                  <1>  popa
    44                                  en:
    45                                  FINISH
    45                              <1>  _syscall_exit %1
    45 00000130 BB00000000          <2>  mov ebx, %1
    45 00000135 B801000000          <2>  mov eax, 1
    45 0000013A CD80                <2>  int 0x80
